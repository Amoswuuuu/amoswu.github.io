{"meta":{"title":"Amos'Blog","subtitle":"","description":"恒者行远，思者常新。","author":"Amos Wu","url":"https://blog.amoswu.cn","root":"/"},"pages":[{"title":"Friends","date":"2021-01-02T15:33:31.000Z","updated":"2021-01-02T15:33:31.153Z","comments":true,"path":"friends/index.html","permalink":"https://blog.amoswu.cn/friends/index.html","excerpt":"","text":""},{"title":"About","date":"2021-01-02T15:09:15.000Z","updated":"2021-01-02T16:29:54.198Z","comments":true,"path":"about/index.html","permalink":"https://blog.amoswu.cn/about/index.html","excerpt":"","text":"没有什么永垂不朽 唯有责任不可辜负 关于博主 Hey，我是AmosWu，一个野生程序猿[2021]，坐标石家庄。 我将我的所思所想写在这里，与你结缘。 关于此博客 本博客创建于2018年10月10日，系AmosWu的私人博客，主要分享一些开发技术、经验，读书笔记、影评和一些日常随笔。"}],"posts":[{"title":"浅谈互联网下载查毒","slug":"浅谈互联网下载查毒","date":"2020-09-15T16:00:00.000Z","updated":"2021-01-02T16:41:47.456Z","comments":true,"path":"2020/09/16/浅谈互联网下载查毒/","link":"","permalink":"https://blog.amoswu.cn/2020/09/16/%E6%B5%85%E8%B0%88%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%9F%A5%E6%AF%92/","excerpt":"","text":"全文约1400字，阅读需要4分钟 背景在互联网经过几十年的发展后，信息爆炸的时代真正地到来了。每天我们需要处理、识别、使用不同来源的信息，这些信息就像花园里自然生长的花草，有的长，有的短，有的营养丰富，有的剧毒无比。 网络病毒，就是致使美丽的“花草”中毒的根源。网络病毒，广义上被认为可以通过网络传播，同时破坏某些网络组件（服务器、客户端、交换机和路由器）的病毒；狭义上则被认为是局限于网络范围内的病毒。网络病毒多在微软开发并维护的Windows操作系统中传播。 网络病毒从不同角度有着不同的分类方式。从功能来分，可以分为木马病毒和蠕虫病毒。其中木马病毒属于一种后门程序，有的为了窃取用户隐私数据（如社交应用的账号密码、游戏账号等等），有的则为了破坏计算机及计算机内的数据，木马病毒危害能力没有蠕虫病毒来的迅猛。蠕虫病毒传播途径很广，它可以利用操作系统和程序的漏洞主动发起攻击，它还可以主动发送计算机的漏洞模块数据，从而感染局域网或者互联网内的所有计算机。从传播途径来分，有邮件型病毒和漏洞型病毒。 在简单了解了计算机病毒的来源、危害及传播途径之后，我们应该树立起“防毒”意识，主动查毒，发现一个上报一个。 从下载文件谈起身处中国，我们应感到荣幸。在国家层面很早就建立起了防火墙，也就是我们熟知的GFW，这样可以过滤大量的不良信息、有毒文件等等。在国内互联网飞速发展的背景下，我们国家涌现出了一大批优秀的安全技术攻坚团队，他们不断迭代自己的产品，并将其免费提供给大众使用，这些安全产品守护了每一台设备的安全。 今天，我就从一个具体而又常见的实例说一说如何避免下载文件带来的病毒威胁。 日常生活中，使用电脑下载互联网上的文件是我们最常用的操作之一。我们下载文件的习惯大概可以分为两类，一类是从安全软件自带的应用商店进行下载和安装，这些常见的应用商店有360软件中心、腾讯应用中心等等；另一类是通过网络地址下载，这里的地址种类大概有软件官网、下载站、网盘、即时通讯软件等等。 两类下载来源安全性如何？先说第一类，这类下载来源的大多数软件都是安全的，这里的大多数用数字表示约为99%。也就是说，正常下，没问题。 再说第二类，通过这类方式下载文件的原因其实有很多，比如电脑中没有第一类软件，第一类软件里没有要下载的文件，想下破解版软件，自己写的软件等等。这类来源相对复杂，这里面可以肯定的是只要是官网下载的100%是安全的，前提是找到真正的官网！！！ 如何提高下载来源的安全性？说了这么多，还是存在很大一部分不安全的因素。读到这里，你可能心生疑问，这些因素难道不能一股脑解决吗？ 可以解决。通过下载后的压缩包查毒这种方式，可以避免99%的互联网文件病毒。当然，查毒方式不能太单一， 必须集合了多个国家不同版本的病毒库才会有效。 有什么具体推荐？这里推荐两个在线查毒网站，操作都很简单，将下载好的压缩文件点击上传，等待片刻即可获得具有唯一MD5编号的查毒报告。 Virustotal https://www.virustotal.com/ 全球最大的在线查毒网站，几十个国家不同团队的病毒库作为核心检测源，最大支持单次上传500M文件。 左上角的0表示该文件威胁为0，安全。 腾讯哈勃 https://habo.qq.com/ 国内最好用的在线查毒网站，依托腾讯的强大数据处理能力，最大支持单词上传30M文件（普通用户）。 未发现风险和轻度风险表示可以使用。 网络安全无小事信息时代正扑面而来，网络安全是每一个使用互联网的人都应该守护的准则。如果你在使用互联网过程中发现病毒或疑似病毒，你可以通过一下平台提交你的发现。 国家信息安全漏洞共享平台 https://www.cnvd.org.cn/ 金山网络-可疑文件上报 http://www.ijinshan.com/virus_report/ 360杀毒-样本上报 http://sampleup.sd.360.cn/index.php 如果你想了解最新最全面的病毒资讯，可以访问如下链接获取。 国家互联网应急中心 https://www.cert.org.cn/ 网络安全威胁信息共享平台 https://share.anva.org.cn/index 相关参考： [1]. 百度百科-网络病毒词条","categories":[{"name":"科普","slug":"科普","permalink":"https://blog.amoswu.cn/categories/%E7%A7%91%E6%99%AE/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"随笔","slug":"随笔","permalink":"https://blog.amoswu.cn/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"10年Qt开发经验总结","slug":"10年Qt开发经验总结","date":"2020-09-08T16:00:00.000Z","updated":"2021-01-02T16:37:37.826Z","comments":true,"path":"2020/09/09/10年Qt开发经验总结/","link":"","permalink":"https://blog.amoswu.cn/2020/09/09/10%E5%B9%B4Qt%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/","excerpt":"","text":"这段时间，学习量陡升。遇到的问题也是五花八门，越来越多，有的在搜索引擎可以找到答案，有的则需要痛苦地耗费很长时间才能寻到一丝解决方法，还有的直接就找不到答案。这也让我更加坚定地要将自己所学所遇的知识、问题，所踩过的坑都要记录下来，利己也利他。 废话不多说了，今天要带来的是一篇万字长文，是一位有着10多年 Qt 开发经验的大佬在他的博客、Github、Gitee上分享过的一篇经验贴。我用了一天的时间将其中的经验重新排版、整理，对自己遇到过的坑也进行了相应的更新，形成此篇。后续我也会将遇到的新问题、新坑一并更新到这里。这个既是经验贴，也是避坑指南，愿读到此篇的你，Qt 编程道路一路平坦~ 1最近一次更新时间：2020-09-09 18:00 原文地址 Gitee ‧ 飞扬青云 最近更新 2020/09/04 09:07 ### 一、开发经验总结 当编译发现大量错误的时候，从第一个看起，一个一个的解决，不要急着去看下一个错误，往往后面的错误都是由于前面的错误引起的，第一个解决后很可能都解决了。 定时器是个好东西，学会好使用它，有时候用QTimer::singleShot可以解决意想不到的问题。 打开 Qt Creator，在构建套件的环境中增加MAKEFLAGS=-j8，可以不用每次设置多线程编译。珍爱时间和生命。新版的 Qt Creator 已经默认就是j8。 如果你想顺利用 QtCreator 部署安卓程序，首先你要在 AndroidStudio 里面配置成功，把坑全部趟平。 很多时候找到 Qt 对应封装的方法后，记得多看看该函数的重载，多个参数的，你会发现不一样的世界，有时候会恍然大悟，原来Qt已经帮我们封装好了。 绘制平铺背景QPainter::drawTiledPixmap,绘制圆角矩形QPainter::drawRoundedRect(),而不是 QPainter::drawRoundRect() 。 Qt5 增强了很多安全性验证，如果出现setGeometry: Unable to set geometry，请将该控件的可见移到加入布局之后。 对 QLCDNumber 控件设置样式，需要将 QLCDNumber 的 segmentstyle 设置为 flat 。 使用弱属性机制，可以存储临时的值用于传递判断。可以通过widget-&gt;dynamicPropertyNames()列出所有弱属性名称，然后通过widget-&gt;property(&quot;name&quot;)取出对应的弱属性的值。 在开发时, 无论是出于维护的便捷性, 还是节省内存资源的考虑, 都应该有一个 qss 文件来存放所有的样式表, 而不应该将 setStyleSheet 写的到处都是。如果是初学阶段或者测试阶段可以直接 UI 上右键设置样式表，正式项目还是建议统一到一个 qss 样式表文件比较好，统一管理。 如果出现 Z-order assignment: is not a valid widget. 错误提示，用记事本打开对应的 ui 文件，找到&lt;zorder&gt;&lt;/zorder&gt; 为空的地方，删除即可。 善于利用 QComboBox 的 addItem 的第二个参数设置用户数据，可以实现很多效果，使用itemData 取出来。 如果用了 webengine 模块，发布程序的时候要带上 QtWebEngineProcess.exe + translations文件夹 + resources文件夹。 默认 Qt 是一个窗体一个句柄，如果要让每个控件都拥有独立的句柄，设置下 a.setAttribute(Qt::AA_NativeWindows) 。 可以对整体的指示器设置样式，例如 *::down-arrow,*::menu-indicator&#123;&#125; *::up-arrow:disabled,*::up-arrow:off&#123;&#125;。 嵌入式 linux 运行 Qt 程序 Qt4 写法：./HelloQt -qws &amp; Qt5写法：./HelloQt --platform xcb。 Qt Creator 软件的配置文件存放在：C:\\Users\\Administrator\\AppData\\Roaming\\QtProject，有时候如果发现出问题了，将这个文件夹删除后打开 Qt Creator 自动重新生成即可。 QMediaPlayer 是个壳，依赖本地解码器，视频这块默认基本上就播放个 MP4 ，如果要支持其他格式需要下载 k-lite 或者 LAV Filters 安装即可（WIN上，其他系统上自行搜索）。如果需要做功能强劲的播放器，初学者建议用 vlc、mpv，终极大法用 ffmpeg。 获取标题栏高度：style()-&gt;pixelMetric(QStyle::PM_TitleBarHeight); PM_TitleBarHeight 点进去你会发现新大陆。 清空数据表并重置自增ID，sql = truncate table table_name。 如果运行程序出现 Fault tolerant heap shim applied to current process. This is usually due to previous crashes. 错误。 办法：打开注册表，找到HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Layers\\，选中Layers键值，从右侧列表中删除自己的那个程序路径即可。 Qt 内置了 QFormLayout 表单布局用于自动生成标签 + 输入框的组合的表单界面。 qml 播放视频在 linux 需要安装 libpulse-dev , sudo apt-get install libpulse-dev。 可以直接继承 QSqlQueryModel 实现自定义的 QueryModel ，比如某一列字体颜色，占位符，其他样式等，重写 QVariant CustomSqlModel::data(const QModelIndex &amp;index, int role) const 。 QPushButton 左对齐文字，需要设置样式表 QPushButton&#123;text-align:left;&#125; 。 多种预定义变量 #if (defined webkit) || (defined webengine)，去掉生成空的debug 和 release 目录 CONFIG -= debug_and_release。 新版的 Qtcreator 增强了语法检查，会弹出很多警告提示等，可以在插件列表中关闭 clang 打头的几个即可，Help &gt;&gt; About Plugins 。也可以设置代码检查级别，Tools &gt;&gt; Options &gt;&gt; C++ &gt;&gt; Code Model 。 如果需要指定无边框窗体，但是又需要保留操作系统的边框特性，可以自由拉伸边框，可以使用 setWindowFlags(Qt::CustomizeWindowHint) 。 有时候在界面上加了弹簧，需要动态改变弹簧对应的拉伸策略，对应方法为 changeSize，很多人会选择使用 set 开头去找，找不到的。 在使用 QFile 的过程中，不建议频繁的打开文件写入然后再关闭文件，比如：间隔 5ms 输出日志，IO性能瓶颈很大，这种情况建议先打开文件不要关闭，等待合适的时机，可以在析构函数中或者日期变了需要重新变换日志文件的时候关闭文件。不然短时间内大量的打开关闭文件会很卡，文件越大越卡。 如果程序打包好以后弹出提示 This application failed to start because it could not find or load the Qt platform plugin 一般都是因为 platforms 插件目录未打包或者打包错了的原因导致的。 非常不建议 tr 中包含中文，尽管现在的新版Qt支持中文到其他语言的翻译，但是很不规范，也不知道 TMD 是谁教的，tr的本意是包含英文，然后翻译到其他语言比如中文，现在大量的初学者滥用 tr ，如果没有翻译的需求，禁用 tr ，tr 需要开销的，Qt默认会认为他需要翻译，会额外进行特殊处理。 建议进行中文兼容时使用如下代码： QString s = QString::fromUtf8(&quot;这是一个 UTF-8 的字符串 &quot;);； QString s = QStringLiteral(&quot;这是一个 UTF-8 的字符串 &quot;);。 很多人 Qt 和 Qt Creator 傻傻分不清楚，经常问 Qt 什么版本结果发一个 Qt Creator 的版本过来，Qt Creator 是使用 Qt 编写的集成开发环境 IDE ，和宇宙第一的 Visual Studio 一样，他可以是 msvc 编译器的（ WIN 对应的 Qt 集成安装环境中自带的 Qt Cerator 是 msvc 的），也可以是 mingw 编译的，还可以是gcc的。如果是自定义控件插件，需要集成到Qt Creator中，必须保证该插件的动态库文件（dll或者so等文件）对应的编译器和Qt版本以及位数和Qt Creator的版本完全一致才行，否则基本不大可能集成进去。特别注意的是Qt集成环境安装包中的Qt版本和Qt Creator版本未必完全一致，必须擦亮眼睛看清楚，有些是完全一致的。 超过两处相同处理的代码，建议单独写成函数。代码尽量规范精简，比如 if(a == 123) 要写成 if (123 == a)，值在前面，再比如 if (ok == true) 要写成 if (ok)，if (ok == false) 要写成 if (!ok)等。 很多人问Qt嵌入式平台用哪个好，这里统一回答（当前时间节点2018年）：imx6 + 335x比较稳定，性能高就用 RK3288 RK3399，便宜的话就用全志H3，玩一玩可以用树莓派、香橙派。 对于大段的注释代码，建议用 #if 0 #endif 将代码块包含起来，而不是将该段代码选中然后全部 // ，下次要打开这段代码的话，又需要重新选中一次取消，如果采用的是 #if 0则只要把0改成1即可，效率大大提升。 Qt打包发布，有很多办法，Qt5 以后提供了打包工具 windeployqt（ linux上为linuxdeployqt，mac上为 macdeployqt ）可以很方便的将应用程序打包，使用下来发现也不是万能的，有时候会多打包一些没有依赖的文件，有时候又会忘记打包一些插件尤其是用了 qml 的情况下，而且不能识别第三方库，比如程序依赖 ffmpeg ，则对应的库需要自行拷贝，终极大法就是将你的可执行文件复制到Qt安装目录下的 bin 目录，然后整个一起打包，挨个删除不大可能依赖的组件，直到删到正常运行为止。 Qt中的动画，底层用的是 QElapsedTimer 定时器来完成处理，比如产生一些指定规则算法的数据，然后对属性进行处理。 不要把 d 指针看的很玄乎，其实就是在类的实现文件定义了一个私有类，用来存放局部变量，个人建议在做一些小项目时，没有太大必要引入这种机制，会降低代码可读性，增加复杂性，新手接受项目后会看的很懵逼。 很多人在绘制的时候，设置画笔以为就只可以设置个单调的颜色，其实QPen还可以设置brush，这样灵活性就提高不知道多少倍，比如设置 QPen 的 brush 以后，可以使用各种渐变，比如绘制渐变颜色的进度条和文字等，而不再是单调的一种颜色。 示例： 12345678910QPainter painter(this);QPen pen; // creates a default penpen.setStyle(Qt::DashDotLine);pen.setWidth(3);pen.setBrush(Qt::green);pen.setCapStyle(Qt::RoundCap);pen.setJoinStyle(Qt::RoundJoin);painter.setPen(pen); 很多控件都带有 viewport ，比如 QTextEdit / QTableWidget / QScrollArea，有时候对这些控件直接处理的时候发现不起作用，需要对其 viewport() 设置才行，比如设置滚动条区域背景透明，需要使用 scrollArea-&gt;viewport()-&gt;setStyleSheet(&quot;background-color:transparent;&quot;); 而不是 scrollArea-&gt;setStyleSheet(&quot;QScrollArea&#123;background-color:transparent;&#125;&quot;); 。 有时候设置了鼠标跟踪 setMouseTracking 为真，如果该窗体上面还有其他控件，当鼠标移到其他控件上面的时候，父类的鼠标移动事件MouseMove识别不到了，此时需要用到HoverMove 事件，需要先设置 setAttribute(Qt::WA_Hover, true); 。 在我们使用 QList、QStringList、QByteArray 等链表或者数组的过程中，如果只需要取值，而不是赋值，强烈建议使用 at() 取值而不是 [] 操作符，在官方书籍《C++ GUI Qt 4编程（第二版）》的书中有特别的强调说明，此教材的原作者据说是Qt开发的核心人员编写的，所以还是比较权威，至于使用 at() 与使用 [] 操作符速度效率的比较，网上也有网友做过此类对比。 原文在书的212页，这样描述的： Qt对所有的容器和许多其他类都使用隐含共享，隐含共享是Qt对不希望修改的数据决不进行复制的保证，为了使隐含共享的作用发挥得最好，可以采用两个新的编程习惯。第一种习惯是对于一个（非常量的）向量或者列表进行只读存取时，使用 at() 函数而不用 [] 操作符，因为Qt的容器类不能辨别 [] 操作符是否将出现在一个赋值的左边还是右边，他假设最坏的情况出现并且强制执行深层赋值，而 at() 函数则不被允许出现在一个赋值的左边。 安全的删除 Qt 的对象类，强烈建议使用 deleteLater 而不是 delete ，因为deleteLater会选择在合适的时机进行释放，而delete会立即释放，很可能会出错崩溃。如果要批量删除对象集合，可以用 qDeleteAll ，比如 qDeleteAll(btns) 。 在 QTableView 控件中，如果需要自定义的列按钮、复选框、下拉框等其他模式显示，可以采用自定义委托 QItemDelegate 来实现，如果需要禁用某列，则在自定义委托的重载createEditor 函数返回0即可。自定义委托对应的控件在进入编辑状态的时候出现，如果想一直出现，则需要重载paint函数用 drawPrimitive 或者 drawControl 来绘制。 将 QApplication::style() 对应的 drawPrimitive 、drawControl、drawItemText、drawItemPixmap等几个方法用熟悉了，再结合QStyleOption属性，可以玩转各种自定义委托，还可以直接使用paint函数中的painter进行各种绘制，各种牛逼的表格、树状列表、下拉框等，绝对屌炸天。QApplication::style()-&gt;drawControl 的第4个参数如果不设置，则绘制出来的控件不会应用样式表。 心中有坐标，万物皆 painter，强烈建议在学习自定义控件绘制的时候，将 qpainter.h 头文件中的函数全部看一遍、试一遍、理解一遍，这里边包含了所有Qt内置的绘制的接口，对应的参数都试一遍，你会发现很多新大陆，会大大激发你的绘制的兴趣，犹如神笔马良一般，策马崩腾遨游代码绘制的世界。 理论上串口和网络收发数据都是默认异步的，操作系统自动调度，完全不会卡住界面，网上那些说收发数据卡住界面主线程的都是扯几把蛋，真正的耗时是在运算以及运算后的处理，而不是收发数据，在一些小数据量运算处理的项目中，一般不建议动用线程去处理，线程需要调度开销的，不要什么东西都往线程里边扔，线程不是万能的。只有当真正需要将一些很耗时的操作比如编码解码等，才需要移到线程处理。 在构造函数中获取控件的宽高很可能是不正确的，需要在控件首次显示以后再获取才是正确的，控件是在首次显示以后才会设置好正确的宽高值，记住是在首次显示以后，而不是构造函数或者程序启动好以后，如果程序启动好以后有些容器控件比如 QTabWidget 中的没有显示的页面的控件，你去获取宽高很可能也是不正确的，万无一失的办法就是首次显示以后去获取。 数据库处理一般建议在主线程，如果非要在其他线程，务必记得打开数据库也要在那个线程，即在那个线程使用数据库就在那个线程打开，不能打开数据库在主线程，执行 sql 在子线程，很可能出问题。 Qt中的 QString 和 const char * 之间转换，最好用 toStdString().c_str() 而不是 toLocal8Bit().constData() ，比如在 setProperty 中如果用后者，字符串中文就会不正确，英文正常。 Qt 的信号槽机制非常牛逼，也是 Qt 的独特的核心功能之一，有时候我们在很多窗体中传递信号来实现更新或者处理，如果窗体层级比较多，比如窗体 A 的父类是窗体 B ，窗体 B 的父类是窗体 C ，窗体 C 有个子窗体 D ，如果窗体 A 一个信号要传递给窗体 D ，问题来了，必须先经过窗体 B 中转到窗体 C 再到窗体 D 才行，这样的话各种信号关联信号的 connect 会非常多而且管理起来比较乱，可以考虑增加一个全局的单例类 AppEvent ，公共的信号放这里，然后窗体A对应信号绑定到 AppEvent ，窗体 D 绑定 AppEvent 的信号到对应的槽函数即可，干净清爽整洁。 QTextEdit 右键菜单默认英文的，如果想要中文显示，加载 widgets.qm 文件即可，一个 Qt 程序中可以安装多个翻译文件，不冲突。 Qt 中有个全局的焦点切换信号 focusChanged ，可以用它做自定义的输入法。Qt4中默认会安装输入法上下文，比如在main函数打印 a.inputContext 会显示值，这个默认安装的输入法上下文，会拦截两个牛逼的信号 QEvent::RequestSoftwareInputPanel 和QEvent::CloseSoftwareInputPanel ，以至于就算你安装了全局的事件过滤器依然识别不到这两个信号，你只需要在 main 函数执行 a.setInputContext(0) 即可，意思是安装输入法上下文为空。 在 Qt5.10 以后，表格控件 QTableWidget 或者 QTableView 的默认最小列宽改成了15，以前的版本是 0 ，所以在新版的qt中，如果设置表格的列宽过小，不会应用，取的是最小的列宽。所以如果要设置更小的列宽需要重新设置 ui-&gt;tableView-&gt;horizontalHeader()-&gt;setMinimumSectionSize(0);。 Qt 支持所有的界面控件比如 QPushButton、QLineEdit 自动关联 on_控件名_信号(参数) 信号槽，比如按钮的单击信号 on_pushButton_clicked()，然后直接实现槽函数即可。 setPixmap 是最糟糕的贴图方式，一般只用来简单的不是很频繁的贴图，频繁的建议painter 绘制，默认双缓冲，在高级点用 opengl 绘制，利用 GPU 。 如果需要在尺寸改变的时候不重绘窗体，则设置属性即可 this-&gt;setAttribute(Qt::WA_StaticContents, true); 这样可以避免可以避免对已经显示区域的重新绘制。 默认程序中获取焦点以后会有虚边框，如果看着觉得碍眼不舒服可以去掉，设置样式即可：setStyleSheet(&quot;*&#123;outline:0px;&#125;&quot;);。 从 Qt4 转到 Qt5 ，有些类的方法已经废弃或者过时了，如果想要在 Qt5 中启用 Qt4 的方法，比如 QHeadView 的 setMovable，可以在你的 pro 或者 pri 文件中加上一行即可：DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0 。 QString 的 replace 函数会改变原字符串，切记，他在返回替换后的新字符串的同时也会改变原字符串，我的乖乖！ QGraphicsEffect 类的相关效果很炫，可以实现很多效果比如透明、渐变、阴影等，但是该类很耗 CPU，如果不是特别需要一般不建议用，就算用也是要用在该部件后期不会发生频繁绘制的场景，不然会让你哭晕在厕所。 巧用 QMetaObject::invokeMethod 方法可以实现很多效果，包括同步和异步执行，比如有个应用场景是在回调中，需要异步调用一个public函数，如果直接调用的话会发现不成功，此时需要使用 QMetaObject::invokeMethod(obj, &quot;fun&quot;, Qt::QueuedConnection); 这种方式来就可以。invokeMethod 函数有很多重载参数，可以传入返回值和执行方法的参数等。 Qt5 中的信号是 public 的，可以在需要的地方直接 emit 即可，而在Qt4中信号是 protected的，不能直接使用，需要定义一个 public 函数来 emit 。 Qt5.15 版本开始官方不再提供安装包，只提供源码，可以自行编译或者在线安装，估计每次编译各种版本太麻烦，更多的是为了统计收集用户使用信息比如通过在线安装，后期可能会逐步加大商业化力度。 很多初学者甚至几年工作经验的人，对多线程有很深的误解和滥用，尤其是在串口和网络通信这块，什么都往多线程里面丢，一旦遇到界面卡，就把数据收发啥的都搞到多线程里面去，殊不知绝大部分时候那根本没啥用，因为没找到出问题的根源。 如果你没有使用 wait*** 函数的话，大部分的界面卡都出在数据处理和展示中，比如传过来的是一张图片的数据，你需要将这些数据转成图片，这个肯定是耗时的； 还有就是就收到的数据曲线绘制出来，如果过于频繁或者间隔过短，肯定会给 UI 造成很大的压力的，最好的办法是解决如何不要频繁绘制 UI 比如合并数据一起绘制等； 如果是因为绘制 UI 造成的卡，那多线程也是没啥用的，因为 UI 只能在主线程； 串口和网络的数据收发默认都是异步的，由操作系统调度的，如果数据处理复杂而且数据量大，你要做的是将数据处理放到多线程中； 如果没有严格的数据同步需求，根本不需要调用 wait*** 之类的函数来立即发送和接收数据，实际需求中大部分的应用场景其实异步收发数据就足够了； 有严格数据同步需求的场景还是放到多线程会好一些，不然你 wait*** 就卡在那边了； 多线程是需要占用系统资源的，理论上来说，如果线程数量超过了 CPU 的核心数量，其实多线程调度可能花费的时间更多，各位在使用过程中要权衡利弊； MSVC编译器的选择说明 如果是32位的 Qt 则编译器选择 x86 开头的 如果是64位的 Qt 则编译器选择 amd64 开头的 具体是看安装的 Qt 构建套件版本以及目标运行平台的系统位数和架构 一般现在的电脑默认以64位的居多，选择 amd64 即可 如果用户需要兼容32位的系统则建议选择32位的 Qt ，这样即可在32位也可以在64位系统运行 诸葛大佬补充：x86 / x64 都是编译环境和运行环境相同，没有或。带下划线的就是交叉编译，前面是编译环境，后面是运行环境。 名称 说明 x86 32/64位系统上编译在32/64位系统上运行 x86_amd64 32/64位系统上编译在64位系统上运行 x86_arm 32/64位系统上编译在arm系统上运行 amd64 64位系统上编译在64位系统上运行 amd64_x86 64位系统上编译在32/64位系统上运行 amd64_arm 64位系统上编译在arm系统上运行 Qt默认不支持大资源文件，比如添加了字体文件，需要 pro 文件开启 CONFIG += resources_big 。 运行文件附带调试输出窗口 CONFIG += console pro。 可以在 pro 文件中写上标记版本号 + ico 图标（Qt5才支持） 12VERSION = 2020.10.25RC_ICONS = main0.ico 管理员运行程序，限定在MSVC编译器。 12QMAKE_LFLAGS += /MANIFESTUAC:&quot;level=&#x27;requireAdministrator&#x27; uiAccess=&#x27;false&#x27;&quot; #以管理员运行QMAKE_LFLAGS += /SUBSYSTEM:WINDOWS,&quot;5.01&quot; #VS2013 在XP运行 移除旧的样式 1234//移除原有样式style()-&gt;unpolish(ui-&gt;btn);//重新设置新的该控件的样式。style()-&gt;polish(ui-&gt;btn); 获取类的属性 12345678const QMetaObject *metaobject = object-&gt;metaObject();int count = metaobject-&gt;propertyCount();for (int i = 0; i &lt; count; ++i) &#123; QMetaProperty metaproperty = metaobject-&gt;property(i); const char *name = metaproperty.name(); QVariant value = object-&gt;property(name); qDebug() &lt;&lt; name &lt;&lt; value;&#125; Qt内置图标封装在QStyle中，大概七十多个图标，可以直接拿来用。 123456789SP_TitleBarMenuButton,SP_TitleBarMinButton,SP_TitleBarMaxButton,SP_TitleBarCloseButton,SP_MessageBoxInformation,SP_MessageBoxWarning,SP_MessageBoxCritical,SP_MessageBoxQuestion,... 根据操作系统位数判断加载 1234win32 &#123; contains(DEFINES, WIN64) &#123; DESTDIR = $$&#123;PWD&#125;/../../bin64 &#125; else &#123; DESTDIR = $$&#123;PWD&#125;/../../bin32 &#125;&#125; 可以将控件 A 添加到布局，然后控件 B 设置该布局，这种灵活性大大提高了控件的组合度，比如可以在文本框左侧右侧增加一个搜索按钮，按钮设置图标即可。 123456QPushButton *btn = new QPushButton;btn-&gt;resize(30, ui-&gt;lineEdit-&gt;height());QHBoxLayout *layout = new QHBoxLayout(ui-&gt;lineEdit);layout-&gt;setMargin(0);layout-&gt;addStretch();layout-&gt;addWidget(btn); 巧妙的使用 findChildren 可以查找该控件下的所有子控件。findChild 为查找单个。 123456//查找指定类名objectName的控件QList&lt;QWidget *&gt; widgets = parentWidget.findChildren&lt;QWidget *&gt;(&quot;widgetname&quot;);//查找所有QPushButtonQList&lt;QPushButton *&gt; allPButtons = parentWidget.findChildren&lt;QPushButton *&gt;();//查找一级子控件,不然会一直遍历所有子控件QList&lt;QPushButton *&gt; childButtons = parentWidget.findChildren&lt;QPushButton *&gt;(QString(), Qt::FindDirectChildrenOnly); 巧妙的使用 inherits 判断是否属于某种类。 1234QTimer *timer = new QTimer; // QTimer inherits QObjecttimer-&gt;inherits(&quot;QTimer&quot;); // returns truetimer-&gt;inherits(&quot;QObject&quot;); // returns truetimer-&gt;inherits(&quot;QAbstractButton&quot;); // returns false Qt + Android 防止程序被关闭。 1234567#if defined(Q_OS_ANDROID)QAndroidService a(argc, argv);return a.exec()#elseQApplication a(argc, argv);return a.exec();#endif 可以执行位置设置背景图片。 123456QMainWindow &gt; .QWidget &#123; background-color: gainsboro; background-image: url(:/images/pagefold.png); background-position: top right; background-repeat: no-repeat&#125; 判断编译器类型、编译器版本、操作系统。 1234567891011121314151617181920212223242526272829303132333435363738394041424344//GCC编译器#ifdef __GNUC__#if __GNUC__ &gt;= 3 // GCC3.0以上//MSVC编译器#ifdef _MSC_VER#if _MSC_VER &gt;=1000 // VC++4.0以上#if _MSC_VER &gt;=1100 // VC++5.0以上#if _MSC_VER &gt;=1200 // VC++6.0以上#if _MSC_VER &gt;=1300 // VC2003以上#if _MSC_VER &gt;=1400 // VC2005以上#if _MSC_VER &gt;=1500 // VC2008以上#if _MSC_VER &gt;=1600 // VC2010以上#if _MSC_VER &gt;=1700 // VC2012以上#if _MSC_VER &gt;=1800 // VC2013以上#if _MSC_VER &gt;=1900 // VC2015以上//Borland C++#ifdef __BORLANDC__//Cygwin#ifdef __CYGWIN__#ifdef __CYGWIN32__//mingw#ifdef __MINGW32__//windows#ifdef _WIN32 //32bit#ifdef _WIN64 //64bit#ifdef _WINDOWS //图形界面程序#ifdef _CONSOLE //控制台程序//Windows（95/98/Me/NT/2000/XP/Vista）和Windows CE都定义了#if (WINVER &gt;= 0x030a) // Windows 3.1以上#if (WINVER &gt;= 0x0400) // Windows 95/NT4.0以上#if (WINVER &gt;= 0x0410) // Windows 98以上#if (WINVER &gt;= 0x0500) // Windows Me/2000以上#if (WINVER &gt;= 0x0501) // Windows XP以上#if (WINVER &gt;= 0x0600) // Windows Vista以上//_WIN32_WINNT 内核版本#if (_WIN32_WINNT &gt;= 0x0500) // Windows 2000以上#if (_WIN32_WINNT &gt;= 0x0501) // Windows XP以上#if (_WIN32_WINNT &gt;= 0x0600) // Windows Vista以上 在 pro 中判断 Qt 版本及构建套件位数 1234567891011121314151617181920212223#打印版本信息message(qt version: $$QT_VERSION)#判断当前qt版本号QT_VERSION = $$[QT_VERSION]QT_VERSION = $$split(QT_VERSION, &quot;.&quot;)QT_VER_MAJ = $$member(QT_VERSION, 0)QT_VER_MIN = $$member(QT_VERSION, 1)#下面是表示 Qt5.5greaterThan(QT_VER_MAJ, 4) &#123;greaterThan(QT_VER_MIN, 4) &#123;#自己根据需要做一些处理&#125;&#125;#QT_ARCH是Qt5新增的,在Qt4上没效果#打印当前Qt构建套件的信息message($$QT_ARCH)#表示arm平台构建套件contains(QT_ARCH, arm) &#123;&#125;#表示32位的构建套件contains(QT_ARCH, i386) &#123;&#125;#表示64位的构建套件contains(QT_ARCH, x86_64) &#123;&#125; Qt 最小化后恢复界面假死冻结，加上代码 12345void showEvent(QShowEvent *e)&#123; setAttribute(Qt::WA_Mapped); QWidget::showEvent(e);&#125; 设置高分屏属性以便支持 2K 、4K 等高分辨率，尤其是手机 app 。必须写在 main 函数的QApplication a(argc, argv); 的前面。 123#if (QT_VERSION &gt; QT_VERSION_CHECK(5,6,0)) QGuiApplication::setAttribute(Qt::AA_EnableHighDpiScaling);#endif Qt5 以后提供了类 QScroller 直接将控件滚动。 1234567891011//禁用横向滚动条ui-&gt;listWidget-&gt;setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);//禁用纵向滚动条ui-&gt;listWidget-&gt;setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);//设置横向按照像素值为单位滚动ui-&gt;listWidget-&gt;setHorizontalScrollMode(QListWidget::ScrollPerPixel);//设置纵向按照像素值为单位滚动ui-&gt;listWidget-&gt;setVerticalScrollMode(QListWidget::ScrollPerPixel);//设置滚动对象以及滚动方式为鼠标左键拉动滚动QScroller::grabGesture(ui-&gt;listWidget, QScroller::LeftMouseButtonGesture);//还有个QScrollerProperties可以设置滚动的一些参数 如果使用 sqlite 数据库不想产生数据库文件，可以创建内存数据库。 12QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;);db.setDatabaseName(&quot;:memory:&quot;); Qtchart 模块从 Qt5.7 开始自带，最低编译要求 Qt5.4 。在安装的时候记得勾选，默认不勾选。使用该模块需要引入命名空间。 123#include &lt;QChartView&gt;QT_CHARTS_USE_NAMESPACEclass CustomChart : public QChartView QLabel 有三种设置文本的方法，掌握好 Qt 的属性系统，举一反三，可以做出很多效果。 123ui-&gt;label-&gt;setStyleSheet(&quot;qproperty-text:hello;&quot;);ui-&gt;label-&gt;setProperty(&quot;text&quot;, &quot;hello&quot;);ui-&gt;label-&gt;setText(&quot;hello&quot;); 巧妙的用 QEventLoop 开启事件循环，可以使得很多同步获取返回结果而不阻塞界面。QEventLoop 内部新建了线程执行。 123QEventLoop loop;connect(reply, SIGNAL(finished()), &amp;loop, SLOT(quit()));loop.exec(); QSqlTableModel 的 rowCount 方法，默认最大返回256 ，如果超过256，可以将表格拉到底部，会自动加载剩余的，每次最大加载256条数据，如果需要打印或者导出数据，记得最好采用 sql 语句去查询，而不是使用 QSqlTableModel 的 rowCount 方法。不然永远最大只会导出256条数据。 如果数据量很小，也可以采用如下方法： 1234//主动加载所有数据,不然获取到的行数&lt;=256while(model-&gt;canFetchMore()) &#123; model-&gt;fetchMore();&#125; 在某些 HTTP POST数据的时候，如果采用的是 &amp; 字符串连接的数据发送，中文解析乱码的话，需要将中文进行URL转码。 12QString content = &quot;测试中文&quot;;QString note = content.toUtf8().toPercentEncoding(); Qt中继承 QWidget 之后，样式表不起作用，解决办法有三个。强烈推荐方法一。 方法一：设置属性 this-&gt;setAttribute(Qt::WA_StyledBackground, true); 方法二：改成继承 QFrame ，因为 QFrame 自带 paintEvent 函数已做了实现，在使用样式表时会进行解析和绘制。 方法三：重新实现 QWidget 的 paintEvent 函数时，使用 QStylePainter 绘制。 1234567void Widget::paintEvent(QPaintEvent *)&#123; QStyleOption option; option.initFrom(this); QPainter painter(this); style()-&gt;drawPrimitive(QStyle::PE_Widget, &amp;option, &amp;painter, this);&#125; 在很多网络应用程序，需要自定义心跳包来保持连接，不然断电或者非法关闭程序，对方识别不到，需要进行超时检测，但是有些程序没有提供心跳协议，此时需要启用系统层的保活程序，此方法适用于TCP连接。 123456789int fd = tcpSocket-&gt;socketDescriptor();int keepAlive = 1; //开启keepalive属性,缺省值:0(关闭)int keepIdle = 5; //如果在5秒内没有任何数据交互,则进行探测,缺省值:7200(s)int keepInterval = 2; //探测时发探测包的时间间隔为2秒,缺省值:75(s)int keepCount = 2; //探测重试的次数,全部超时则认定连接失效,缺省值:9(次)setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, (void *)&amp;keepAlive, sizeof(keepAlive));setsockopt(fd, SOL_TCP, TCP_KEEPIDLE, (void *)&amp;keepIdle, sizeof(keepIdle));setsockopt(fd, SOL_TCP, TCP_KEEPINTVL, (void *)&amp;keepInterval, sizeof(keepInterval));setsockopt(fd, SOL_TCP, TCP_KEEPCNT, (void *)&amp;keepCount, sizeof(keepCount)); 在绘制无背景颜色只有边框颜色的圆形时候，可以用绘制360度的圆弧替代，效果完全一致。 1234QRect rect(-radius, -radius, radius * 2, radius * 2);//以下两种方法二选一,其实绘制360度的圆弧=绘制无背景的圆形painter-&gt;drawArc(rect, 0, 360 * 16);painter-&gt;drawEllipse(rect); Qt封装的 QDateTime 日期时间类非常强大，可以字符串和日期时间相互转换，也可以毫秒数和日期时间相互转换，还可以1970经过的秒数和日期时间相互转换等。 12345678910QDateTime dateTime;QString dateTime_str = dateTime.currentDateTime().toString(&quot;yyyy-MM-dd hh:mm:ss&quot;);//从字符串转换为毫秒（需完整的年月日时分秒）datetime.fromString(&quot;2011-09-10 12:07:50:541&quot;, &quot;yyyy-MM-dd hh:mm:ss:zzz&quot;).toMSecsSinceEpoch();//从字符串转换为秒（需完整的年月日时分秒）datetime.fromString(&quot;2011-09-10 12:07:50:541&quot;, &quot;yyyy-MM-dd hh:mm:ss:zzz&quot;).toTime_t();//从毫秒转换到年月日时分秒datetime.fromMSecsSinceEpoch(1315193829218).toString(&quot;yyyy-MM-dd hh:mm:ss:zzz&quot;);//从秒转换到年月日时分秒（若有zzz，则为000）datetime.fromTime_t(1315193829).toString(&quot;yyyy-MM-dd hh:mm:ss[:zzz]&quot;); 如果是 dialog 窗体，需要在 exec 以后还能让其他代码继续执行，请在dialog窗体exec前增加一行代码，否则会阻塞窗体消息。 123QDialog dialog;dialog.setWindowModality(Qt::WindowModal);dialog.exec(); 在使用 setItemWidget 或者 setCellWidget 的过程中，有时候会发现设置的控件没有居中显示而是默认的左对齐，而且不会自动拉伸填充，对于追求完美的程序员来说，这个可不大好看，有个终极通用办法就是，将这个控件放到一个 widget 的布局中，然后将 widget 添加到 item 中，这样就完美解决了，而且这样可以组合多个控件产生复杂的控件。 12345678910//实例化进度条控件QProgressBar *progress = new QProgressBar;//增加widget+布局巧妙实现居中QWidget *widget = new QWidget;QHBoxLayout *layout = new QHBoxLayout;layout-&gt;setSpacing(0);layout-&gt;setMargin(0);layout-&gt;addWidget(progress);widget-&gt;setLayout(layout);ui-&gt;tableWidget-&gt;setCellWidget(0, 0, widget); 很多时候需要在已知背景色的情况下，能够清晰的绘制文字，这个时候需要计算对应的文字颜色。 123//根据背景色自动计算合适的前景色double gray = (0.299 * color.red() + 0.587 * color.green() + 0.114 * color.blue()) / 255;QColor textColor = gray &gt; 0.5 ? Qt::black : Qt::white; 对 QTableView 或者 QTableWidget 禁用列拖动。 12345#if (QT_VERSION &lt;= QT_VERSION_CHECK(5,0,0)) ui-&gt;tableView-&gt;horizontalHeader()-&gt;setResizeMode(0, QHeaderView::Fixed);#else ui-&gt;tableView-&gt;horizontalHeader()-&gt;setSectionResizeMode(0, QHeaderView::Fixed);#endif Qt中的 QColor 对颜色封装的很完美，支持各种转换，比如rgb、hsb、cmyk、hsl，对应的是toRgb、toHsv、toCmyk、toHsl，还支持透明度设置，颜色值还能转成16进制格式显示。 123QColor color(255, 0, 0, 100);qDebug() &lt;&lt; color.name() &lt;&lt; color.name(QColor::HexArgb);//输出 #ff0000 #64ff0000 QVariant 类型异常的强大，可以说是万能的类型，在进行配置文件的存储的时候，经常会用到 QVariant 的转换，QVariant 默认自带了 toString 、toFloat 等各种转换，但是还是不够，比如有时候需要从QVariant转到QColor，而却没有提供toColor的函数，这个时候就要用到万能办法。 12345if (variant.typeName() == &quot;QColor&quot;) &#123; QColor color = variant.value&lt;QColor&gt;(); QFont font = variant.value&lt;QFont&gt;(); QString nodeValue = color.name(QColor::HexArgb);&#125; Qt源码中内置了一些未公开的不能直接使用的黑科技，都藏在对应模块的private中，比如 gui-private widgets-private 等，比如 zip 文件解压类 QZipReader 、压缩类 QZipWrite r就在 gui-private 模块中，需要在 pro 中引入QT += gui-private才能使用。 12345678910111213141516171819202122232425#include &quot;QtGui/private/qzipreader_p.h&quot;#include &quot;QtGui/private/qzipwriter_p.h&quot;QZipReader reader(dirPath);QString path(&quot;&quot;);//解压文件夹到当前目录reader.extractAll(path);//文件夹名称QZipReader::FileInfo fileInfo = reader.entryInfoAt(0);//解压文件QFile file(filePath);file.open(QIODevice::WriteOnly);file.write(reader.fileData(QString::fromLocal8Bit(&quot;%1&quot;).arg(filePath)));file.close();reader.close();QZipWriter *writer = new QZipWriter(dirPath);//添加文件夹writer-&gt;addDirectory(unCompress);//添加文件QFile file(filePath);file.open(QIODevice::ReadOnly);writer-&gt;addFile(data, file.readAll());file.close();writer-&gt;close(); 新版的 QTcpServer 类在64位版本的Qt下很可能不会进入 incomingConnection 函数，那是因为Qt5 对应的 incomingConnection 函数参数变了，由之前的 int 改成了 qintptr ，改成 qintptr 有个好处，在32位上自动是 quint32 而在64位上自动是 quint64 ，如果在Qt5 中继续写的参数是int 则在32位上没有问题在64位上才有问题，所以为了兼容 Qt4 和 Qt5 ，必须按照不一样的参数写。 12345#if (QT_VERSION &gt; QT_VERSION_CHECK(5,0,0)) void incomingConnection(qintptr handle);#else void incomingConnection(int handle);#endif QWebEngineView 控件由于使用了opengl，在某些电脑上可能由于 opengl 的驱动过低会导致花屏或者各种奇奇怪怪的问题，比如 showfullscreen 的情况下鼠标右键失效，需要在main函数启用软件 opengl 渲染。 123456#if (QT_VERSION &gt; QT_VERSION_CHECK(5,4,0)) //下面两种方法都可以,Qt默认采用的是AA_UseDesktopOpenGL QCoreApplication::setAttribute(Qt::AA_UseOpenGLES); //QCoreApplication::setAttribute(Qt::AA_UseSoftwareOpenGL);#endif QApplication a(argc, argv); 另外一个方法解决 全屏 + QWebEngineView 控件一起会产生右键菜单无法弹出的bug,需要上移一个像素 1234QRect rect = qApp-&gt;desktop()-&gt;geometry();rect.setY(-1);rect.setHeight(rect.height());this-&gt;setGeometry(rect); QStyle 内置了很多方法用处很大，比如精确获取滑动条鼠标按下处的值。 1QStyle::sliderValueFromPosition(minimum(), maximum(), event-&gt;x(), width()); 用 QFile 读写文件的时候，推荐用 QTextStream 文件流的方式来读写文件，速度快很多，基本上会有30%的提升，文件越大性能区别越大。 123456789101112131415161718//从文件加载英文属性与中文属性对照表QFile file(&quot;:/propertyname.txt&quot;);if (file.open(QFile::ReadOnly)) &#123; //QTextStream方法读取速度至少快30%#if 0 while(!file.atEnd()) &#123; QString line = file.readLine(); appendName(line); &#125;#else QTextStream in(&amp;file); while (!in.atEnd()) &#123; QString line = in.readLine(); appendName(line); &#125;#endif file.close();&#125; 用 QFile.readAll() 读取 QSS 文件默认是ANSI格式，不支持 UTF8 ，如果在 QtCreator 中打开qss 文件来编辑保存，这样很可能导致 qss 加载以后没有效果。 123456789101112131415161718192021222324252627282930void frmMain::initStyle()&#123; //加载样式表 QString qss; //QFile file(&quot;:/qss/psblack.css&quot;); //QFile file(&quot;:/qss/flatwhite.css&quot;); QFile file(&quot;:/qss/lightblue.css&quot;); if (file.open(QFile::ReadOnly)) &#123;#if 1 //用QTextStream读取样式文件不用区分文件编码 带bom也行 QStringList list; QTextStream in(&amp;file); //in.setCodec(&quot;utf-8&quot;); while (!in.atEnd()) &#123; QString line; in &gt;&gt; line; list &lt;&lt; line; &#125; qss = list.join(&quot;\\n&quot;);#else //用readAll读取默认支持的是ANSI格式,如果不小心用creator打开编辑过了很可能打不开 qss = QLatin1String(file.readAll());#endif QString paletteColor = qss.mid(20, 7); qApp-&gt;setPalette(QPalette(QColor(paletteColor))); qApp-&gt;setStyleSheet(qss); file.close(); &#125;&#125; QString 内置了很多转换函数，比如可以调用 toDouble 转为 double 数据，但是当你转完并打印的时候你会发现精确少了，只剩下三位了，其实原始数据还是完整的精确度的，只是打印的时候优化成了三位，如果要保证完整的精确度，可以调用 qSetRealNumberPrecision 函数设置精确度位数即可。 1234QString s1, s2;s1 = &quot;666.5567124&quot;;s2.setNum(888.5632123, &#x27;f&#x27;, 7);qDebug() &lt;&lt; qSetRealNumberPrecision(10) &lt;&lt; s1.toDouble() &lt;&lt; s2.toDouble(); 用QScriptValueIterator解析数据的时候，会发现总是会多一个节点内容，并且内容为空，如果需要跳过则增加一行代码。 123456while (it.hasNext()) &#123; it.next(); if (it.flags() &amp; QScriptValue::SkipInEnumeration) continue; qDebug() &lt;&lt; it.name();&#125; Qt 表格控件一些常用的设置封装，QTableWidget 继承自 QTableView ，所以下面这个函数支持传入 QTableWidget 。 1234567891011121314151617181920212223242526272829303132333435void QUIHelper::initTableView(QTableView *tableView, int rowHeight, bool headVisible, bool edit)&#123; //奇数偶数行颜色交替 tableView-&gt;setAlternatingRowColors(false); //垂直表头是否可见 tableView-&gt;verticalHeader()-&gt;setVisible(headVisible); //选中一行表头是否加粗 tableView-&gt;horizontalHeader()-&gt;setHighlightSections(false); //最后一行拉伸填充 tableView-&gt;horizontalHeader()-&gt;setStretchLastSection(true); //行标题最小宽度尺寸 tableView-&gt;horizontalHeader()-&gt;setMinimumSectionSize(0); //行标题最大高度 tableView-&gt;horizontalHeader()-&gt;setMaximumHeight(rowHeight); //默认行高 tableView-&gt;verticalHeader()-&gt;setDefaultSectionSize(rowHeight); //选中时一行整体选中 tableView-&gt;setSelectionBehavior(QAbstractItemView::SelectRows); //只允许选择单个 tableView-&gt;setSelectionMode(QAbstractItemView::SingleSelection); //表头不可单击#if (QT_VERSION &gt; QT_VERSION_CHECK(5,0,0)) tableView-&gt;horizontalHeader()-&gt;setSectionsClickable(false);#else tableView-&gt;horizontalHeader()-&gt;setClickable(false);#endif //鼠标按下即进入编辑模式 if (edit) &#123; tableView-&gt;setEditTriggers(QAbstractItemView::CurrentChanged | QAbstractItemView::DoubleClicked); &#125; else &#123; tableView-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers); &#125;&#125; 在一些大的项目中，可能嵌套了很多子项目，有时候会遇到子项目依赖其他子项目的时候，比如一部分子项目用来生成动态库，一部分子项目依赖这个动态库进行编译，此时就需要子项目按照顺序编译。 123456TEMPLATE = subdirs#设置ordered参数以后会依次编译 demo designer examplesCONFIG += orderedSUBDIRS += demoSUBDIRS += designerSUBDIRS += examples 很多时候用 QDialog 的时候会发现阻塞了消息，而有的时候我们希望是后台的一些消息继续运行不要终止，此时需要做个设置。 12QDialog dialog;dialog.setWindowModality(Qt::WindowModal); 在嵌入式 linux 上，如果设置了无边框窗体，而该窗体中又有文本框之类的，发现没法产生焦点进行输入，此时需要主动激活窗体才行。 123456//这种方式设置的无边框窗体在嵌入式设备上无法产生焦点setWindowFlags(Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint | Qt::X11BypassWindowManagerHint);//需要在show以后主动激活窗体w-&gt;show();w-&gt;activateWindow(); 在不同的平台上文件路径的斜杠也是不一样的，比如 linux 系统一般都是 / 斜杠，而在windows上都是 \\\\ 两个反斜杠，Qt 本身程序内部无论在 win 还是 linux 都支持 / 斜杠的路径，但是一些第三方库的话可能需要转换成对应系统的路径，这就需要用到斜杠转换，Qt当然内置类方法。 1234567QString path = &quot;C:/temp/test.txt&quot;;path = QDir::toNativeSeparators(path);//输出 C:\\\\temp\\\\test.txtQString path = &quot;C:\\\\temp\\\\test.txt&quot;;path = QDir::toNativeSeparators(path);//输出 C:/temp/test.txt 二、其他经验 Qt 界的中文乱码问题，版本众多导致的如何选择安装包问题，如何打包发布程序的问题，堪称 Qt 界的三座大山！ 在Qt的学习过程中，学会查看对应类的头文件是一个好习惯，如果在该类的头文件没有找到对应的函数，可以去他的父类中找找，实在不行还有爷爷类，肯定能找到的。通过头文件你会发现很多函数接口其实 Qt 已经帮我们封装好了，有空还可以阅读下他的实现代码。 Qt 安装目录下的 Examples 目录下的例子，看完学完，月薪 20K 起步；Qt 常用类的头文件的函数看完学完使用一遍并加以融会贯通，月薪 30K 起步。 Qt在开发阶段不支持中文目录，切记，这是无数人可能犯的错误，在安装Qt集成开发环境以及编译器的时候，务必记得目录必须英文，否则很可能不正常，建议尽量用默认的安装位置。 如果出现崩溃和段错误，80%都是因为要么越界，要么未初始化，死扣这两点，80%的问题解决了。 Qt一共有几百个版本，关于如何选择Qt版本的问题，我一般保留四个版本，为了兼容 Qt4 用4.8.7，最后的支持XP的版本 5.7.0 ，最新的长期支持版本比如 5.12 ，最高的新版本比如5.14.2 。强烈不建议使用4.7以前和5.0到5.3之间的版本，太多bug和坑，稳定性和兼容性相比于之后的版本相当差，能换就换，不能换说服领导也要换。 Qt 和 msvc 编译器常见搭配是Qt5.7+VS2013、Qt5.9+VS2015、Qt5.12+VS2017，按照这些搭配来，基本上常用的模块都会有，比如 webengine 模块，如果选用的 Qt5.12+msvc2015，则很可能官方没有编译这个模块，只是编译了Qt5.12+msvc2017的。 终极秘籍：如果遇到问题搜索Qt方面找不到答案，试着将关键字用JAVA C# android打头，你会发现别有一番天地，其他人很可能做过！ 新版本Qt安装包安装的时候需要填写注册信息，如果不想填写，先禁用网卡，在运行安装包，可以直接跳过这一步进行安装。 最后一条：珍爱生命，远离编程。祝大家头发浓密，睡眠良好，情绪稳定，财富自由！ 三、学习资源推荐 名称 网址 QtWidget开源demo集合 https://gitee.com/feiyangqingyun/QWidgetDemo QtQuick/Qml开源demo集合 https://gitee.com/jaredtao/TaoQuick qtcn http://www.qtcn.org 豆子的空间 https://www.devbean.net yafeilinux http://www.qter.org 一去二三里 http://blog.csdn.net/liang19890820 乌托邦2号 http://blog.csdn.net/taiyang1987912 foruok http://blog.csdn.net/foruok jason http://blog.csdn.net/wsj18808050 朝十晚八 http://www.cnblogs.com/swarmbees BIG_C_GOD http://blog.csdn.net/big_c_god 公孙二狗 https://qtdebug.com/qtbook 雨田哥 https://blog.csdn.net/ly305750665 郑天佐 https://blog.csdn.net/zhengtianzuo06 寒山-居士 https://blog.csdn.net/esonpo feiyangqingyun https://blog.csdn.net/feiyangqingyun 前行中小猪 http://blog.csdn.net/goforwardtostep 涛哥的知乎专栏 https://zhuanlan.zhihu.com/TaoQt Qt君 https://blog.csdn.net/nicai_xiaoqinxi Qt老外视频教程 http://space.bilibili.com/2592237/#!/index Qt维基补充文档 https://wiki.qt.io/Main Qt源码查看网站 https://code.woboq.org/qt5 Qt官方下载地址 https://download.qt.io Qt官方下载新地址 https://download.qt.io/new_archive/qt/ Qt国内镜像下载地址 https://mirrors.cloud.tencent.com/qt Qt安装包下载地址 http://qthub.com/download/ (超过1000多个，由Qt君整理) 精美图表控件QWT http://qwt.sourceforge.net/ 精美图表控件QCustomPlot https://www.qcustomplot.com/ 免费图标下载 http://www.easyicon.net/ 图形字体下载 https://www.iconfont.cn/ 漂亮界面网站 https://www.ui.cn/ 四、其他 C++入门书籍推荐《C++ primer plus》，进阶书籍推荐《C++ primer》。 Qt入门书籍推荐霍亚飞的《Qt Creator快速入门》，Qt进阶书籍推荐官方的《C++ GUI Qt4编程》，qml书籍推荐《Qt5编程入门》。 强烈推荐程序员自我修养和规划系列书《大话程序员》《程序员的成长课》《解忧程序员》，受益匪浅，受益终生！","categories":[{"name":"知识整理","slug":"知识整理","permalink":"https://blog.amoswu.cn/categories/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"}],"tags":[{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"Qt","slug":"Qt","permalink":"https://blog.amoswu.cn/tags/Qt/"},{"name":"C++","slug":"C","permalink":"https://blog.amoswu.cn/tags/C/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.amoswu.cn/tags/%E7%AC%94%E8%AE%B0/"},{"name":"转载","slug":"转载","permalink":"https://blog.amoswu.cn/tags/%E8%BD%AC%E8%BD%BD/"}]},{"title":"Qt 动态链接库","slug":"Qt 动态链接库","date":"2020-09-01T16:00:00.000Z","updated":"2021-01-02T16:36:44.138Z","comments":true,"path":"2020/09/02/Qt 动态链接库/","link":"","permalink":"https://blog.amoswu.cn/2020/09/02/Qt%20%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/","excerpt":"","text":"近期，在学完 Qt 编程的一些基础知识后，我逐渐往更深层次进发。今天，要记录的是，Qt 框架中动态链接库相关的知识。 有动态链接库是就会有静态链接库，来都来了，肯定是要一次性都解决的。先来看看这两类链接库的区别。 静态链接库（Static-link library）就是把要调用的函数或者过程链接到可执行文件中，成为可执行文件的一部分的库。换言之，函数和过程的代码就在主程序的 .exe 文件中，该文件包含了运行时所需的全部代码。当多个程序调用相同的函数是，内存中会存在这个函数的多个拷贝。在 Windows 操作系统中，静态链接库对应的后缀名为 .lib, 在 Linux 操作系统中，静态链接库对应的后缀名为 .a 。 动态链接库（Dynamic-link library）是微软公司在 Windows 操作系统中实现共享库概念的一种实现方式，后被很多操作系统作为参考，从而使其有了更大的发展。在 Windows 操作系统中，静态链接库对应的后缀名为 .dll , 在 Linux 操作系统中，动态链接库对应的后缀名为 .so。 在 Windows 操作戏台中，所谓动态链接，就是把一些经常会共享的代码（静态链接的 OBJ 程序库）制作成 DLL 档，当可执行文件调用到 DLL 档内的函数时， Windows 操作系统才会把 DLL 档加载到内存中， DLL 档本身的结构就是可执行档，当程序有需求时函数才进行链接。一般情况下，如果一个应用使用了动态链接库， Win32 系统保证内存中只有DLL的一份复制品。 说完动态链接库与静态链接库的区别，不能光纸上谈兵，应该动手来个实例。不如就动手实现一个简易计算的动态库吧。 编写动态库1.建立库文件首先打开 Qt Creator 的新建对话窗口，找到 Library，点击创建 C++ Library。 给定一个名字，然后点击下一步 ，在选择 Qt module 时，选择 Core模块。 接着，勾选一个编译环境。 2. 编写库函数代码compute.pro 1234567891011121314151617181920QT -= guiTEMPLATE = libDEFINES += COMPUTE_LIBRARYCONFIG += c++11DEFINES += QT_DEPRECATED_WARNINGSSOURCES += \\ compute.cppHEADERS += \\ compute_global.h \\ compute.hunix &#123; target.path = /usr/lib&#125;!isEmpty(target.path): INSTALLS += target compute.h 1234567891011121314151617181920212223242526/*************************************************** * * @file compute.h * @version 1.0 * * @author AmosWu * @date 2020/09/02 * @history ***************************************************/#ifndef COMPUTE_H#define COMPUTE_H#include &quot;compute_global.h&quot;class COMPUTE_EXPORT Compute&#123;public: Compute(); int sum(int x, int y); int diff(int x, int y); double prod(double a, double b); double divi(double a, double b);&#125;;#endif // COMPUTE_H compute_global.h 123456789101112#ifndef COMPUTE_GLOBAL_H#define COMPUTE_GLOBAL_H#include &lt;QtCore/qglobal.h&gt;#if defined(COMPUTE_LIBRARY)# define COMPUTE_EXPORT Q_DECL_EXPORT#else# define COMPUTE_EXPORT Q_DECL_IMPORT#endif#endif // COMPUTE_GLOBAL_H compute.cpp 1234567891011121314151617181920212223242526272829303132333435363738394041/*************************************************** * * @file compute.cpp * @version 1.0 * * @author AmosWu * @date 2020/09/02 * @history ***************************************************/#include &quot;compute.h&quot;Compute::Compute()&#123;&#125;int Compute::sum(int x, int y)&#123; return x + y;&#125;int Compute::diff(int x, int y)&#123; return x - y;&#125;double Compute::prod(double a, double b)&#123; return a * b;&#125;double Compute::divi(double a, double b)&#123; if(b &gt; 0) &#123; return a / b; &#125; else &#123; return 999.99; &#125;&#125; 在编写完上述代码后，我们调试一下，或者构建不运行，就会在对应文件夹看到已经生成 .lib 和 .dll等库文件了。 调用动态库1.创建项目这里就不再赘述了了了了了了了了了了 2.拷贝头文件将头文件拷贝到应用工程的目录下，对于大型项目要单独建立文件夹，这里是一个小 Demo ，我就直接放到根目录下了。 3. 引入dll.pro 1LIBS += ‪-LE:/Qt_code/build-compute-Desktop_Qt_5_14_0_MinGW_64_bit-Debug/compute.dll main.cpp 1234567891011121314151617#include &quot;widget.h&quot;#include &quot;compute.h&quot;#include &lt;QApplication&gt;#include &lt;QDebug&gt;int main(int argc, char *argv[])&#123; QApplication a(argc, argv); Widget w; w.setWindowTitle(QStringLiteral(&quot;简易计算器&quot;)); Compute cal; qDebug() &lt;&lt; &quot;Result:&quot; &lt;&lt; cal.sum(2, 10) &lt;&lt; endl; w.show(); return a.exec();&#125; 4.拷贝 .dll 到编译好的程序 .exe 同级目录下 5. 调试运行 此篇仅做动态链接库知识基础，还有更多高级应用，请移步搜索引擎~","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"Qt","slug":"Qt","permalink":"https://blog.amoswu.cn/tags/Qt/"},{"name":"C++","slug":"C","permalink":"https://blog.amoswu.cn/tags/C/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.amoswu.cn/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Qt 流读写XML","slug":"Qt 流读写XML","date":"2020-08-30T16:00:00.000Z","updated":"2021-01-02T16:37:05.858Z","comments":true,"path":"2020/08/31/Qt 流读写XML/","link":"","permalink":"https://blog.amoswu.cn/2020/08/31/Qt%20%E6%B5%81%E8%AF%BB%E5%86%99XML/","excerpt":"","text":"最近在学习 Qt 读写XML文件时，思考了一个问题，除了DOM和SAX外，还有没有更快捷的读写XML的方法？经过一番面向搜索引擎编程，我还真发现了一种方法——流读写XML(Write and read by stream)。今天就借此文向大家分享一下这种方法。 三种读写XML方式的对比 DOM方式 SAX方式 流读写方式 XML被存入内存 速度快，逐行扫描 速度快，一次性传入 消耗内存较多 操作复杂，很难修改 不支持修改和删除 频繁操作较为方便 可以随时停止解析，对大型文档友好 读写API分离 看完对比，你是不是跃跃欲试了？下面我贴上我的练习代码，给你作为参考。 *.pro 123456789101112131415161718192021QT += core gui xmlgreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++11DEFINES += QT_DEPRECATED_WARNINGSSOURCES += \\ main.cpp \\ widget.cppHEADERS += \\ widget.hFORMS += \\ widget.uiqnx: target.path = /tmp/$$&#123;TARGET&#125;/binelse: unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin!isEmpty(target.path): INSTALLS += target widget.h 123456789101112131415161718192021222324252627282930313233343536373839#ifndef WIDGET_H#define WIDGET_H#include &lt;QWidget&gt;QT_BEGIN_NAMESPACEnamespace Ui&#123;class Widget;&#125;QT_END_NAMESPACEclass Widget : public QWidget&#123; Q_OBJECTpublic: Widget(QWidget *parent = nullptr); ~Widget(); /* Func : write_xml() * Feat : 将数据写入XML文件并将写入结果在控制台打印 * Auth : AmosWu * Date : 2020/08/30 * vers : 1.0 */ int write_xml(); /* Func : read_xml() * Feat : 将数据从XML文件读取出来并在控制台打印 * Auth : AmosWu * Date : 2020/08/30 * vers : 1.0 */ int read_xml();private: Ui::Widget *ui;&#125;;#endif // WIDGET_H main.cpp 1234567891011121314#include &quot;widget.h&quot;#include &lt;QApplication&gt;#include &lt;QFile&gt;#include &lt;QXmlStreamWriter&gt;#include &lt;QXmlReader&gt;#include &lt;QtDebug&gt;#include &lt;QStringList&gt;int main(int argc, char *argv[])&#123; QApplication a(argc, argv); Widget(); return a.exec();&#125; widget.cpp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173/* Name : widget.cpp * Date : 2020/08/30 * Auth : Amos */#include &quot;widget.h&quot;#include &quot;ui_widget.h&quot;#include &lt;QFile&gt;#include &lt;QXmlStreamWriter&gt;#include &lt;QtDebug&gt;#include &lt;QStringList&gt;Widget::Widget(QWidget *parent) : QWidget(parent) , ui(new Ui::Widget)&#123; ui-&gt;setupUi(this); int resWrite = write_xml(); if (resWrite &lt; 0) &#123; qDebug() &lt;&lt; &quot;ERRO : Write failed!&quot;; &#125; else &#123; qDebug() &lt;&lt; &quot;INFO : Write succeed!&quot;; &#125; int resRead = read_xml(); if(resRead &lt; 0) &#123; qDebug() &lt;&lt; &quot;ERRO : Read failed!&quot;; &#125; else &#123; qDebug() &lt;&lt; &quot;INFO : Read succeed!&quot;; &#125;&#125;Widget::~Widget()&#123; delete ui;&#125;int Widget::write_xml()&#123; QStringList urls_list; QStringList name_list; QStringList stockList; urls_list &lt;&lt; &quot;https://cn.bing.com&quot; &lt;&lt; &quot;https://google.com&quot; &lt;&lt; &quot;https://baidu.com&quot; &lt;&lt; &quot;https://sougou.com&quot; &lt;&lt; &quot;https://mi.com&quot;; name_list &lt;&lt; &quot;Bing&quot; &lt;&lt; &quot;Google&quot; &lt;&lt; &quot;Baidu&quot; &lt;&lt; &quot;Sougou&quot; &lt;&lt; &quot;Xiaomi&quot;; stockList &lt;&lt; &quot;MSFT.US&quot; &lt;&lt; &quot;GOOG.US&quot; &lt;&lt; &quot;BIDU.US&quot; &lt;&lt; &quot;SOGO.US&quot; &lt;&lt; &quot;01810.HK&quot;; // url_list.append(&quot;https://cn.bing.com&quot;); QFile file(&quot;test.xml&quot;); if (!file.open(QFile::WriteOnly | QFile::Text)) &#123; qDebug() &lt;&lt; QString(&quot;ERRO : Connot open file test.xml(%2)&quot;) .arg(file.errorString()); return -1; &#125; QXmlStreamWriter stream(&amp;file); stream.setCodec(&quot;UTF-8&quot;); // XML编码 stream.setAutoFormatting(true); // 自动格式化 stream.writeStartDocument(&quot;1.0&quot;, true); // 开始文档（XML声明） stream.writeStartElement(&quot;compangy&quot;); // 创建根节点 for(int i = 0; i &lt; urls_list.size(); i++) &#123; stream.writeStartElement(&quot;tech&quot;); stream.writeAttribute(&quot;name&quot;, name_list.at(i)); stream.writeAttribute(&quot;url&quot;, urls_list.at(i)); stream.writeTextElement(&quot;stock_code&quot;, stockList.at(i)); stream.writeEndElement(); qDebug() &lt;&lt; QString(&quot;[ %1-%2 ] write succeed!&quot;) .arg(name_list.at(i)) .arg(urls_list.at(i)); &#125; stream.writeEndElement(); stream.writeEndDocument(); file.close(); return 1;&#125;int Widget::read_xml()&#123; QString strFile(&quot;test.xml&quot;); QFile file(strFile); if(!file.open(QFile::ReadOnly | QFile::Text)) &#123; qDebug() &lt;&lt; QString(&quot;ERRO : Connot open file %1(%2)&quot;) .arg(strFile) .arg(file.errorString()); return -1; &#125; // 如果读取到文档结尾，并且没有出现错误 QXmlStreamReader reader(&amp;file); reader.readNext(); // 跳过根节点 while(!reader.atEnd()) &#123; // 读取下一个记号，它返回记号的类型 QXmlStreamReader::TokenType nType = reader.readNext(); // 下面根据记号的类型来进行不同的输出 // 读取文档的编码方式和版本号 if(nType == QXmlStreamReader::StartDocument) &#123; qDebug() &lt;&lt; &quot;DocEncoding = &quot; &lt;&lt; reader.documentEncoding() &lt;&lt; &quot;DocVersion = &quot; &lt;&lt; reader.documentVersion(); &#125; if(reader.isStartElement()) &#123; if(reader.name() == &quot;tech&quot;) &#123; qDebug() &lt;&lt; &quot;&lt;&quot; &lt;&lt; reader.name() &lt;&lt; &quot;&gt;&quot;; if (reader.attributes().hasAttribute(&quot;name&quot;)) qDebug() &lt;&lt; reader.attributes() .value(&quot;name&quot;); if (reader.attributes().hasAttribute(&quot;url&quot;)) qDebug() &lt;&lt; reader.attributes() .value(&quot;url&quot;); reader.readNext(); &#125; else if(reader.name() == &quot;stock_code&quot;) &#123; qDebug() &lt;&lt; &quot;&lt;&quot; &lt;&lt; reader.name() &lt;&lt; &quot;&gt;&quot;; qDebug() &lt;&lt; reader.readElementText(); reader.readNext(); &#125; else &#123; reader.readNext(); &#125; if (nType == QXmlStreamReader::EndElement) qDebug() &lt;&lt; &quot;&lt;/&quot; &lt;&lt; reader.name() &lt;&lt; &quot;&gt;&quot;; // 打印字符 if(nType == QXmlStreamReader::Characters &amp;&amp; !reader.isWhitespace()) qDebug() &lt;&lt; reader.text(); &#125; &#125; // 如果读取过程中出现错误，那么输出错误信息 if(reader.hasError()) &#123; qDebug() &lt;&lt; &quot;ERRO : &quot; &lt;&lt; reader.errorString(); return -1; &#125; file.close(); return 1;&#125; test.xml 123456789101112131415161718&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;compangy&gt; &lt;tech name=&quot;Bing&quot; url=&quot;https://cn.bing.com&quot;&gt; &lt;stock_code&gt;MSFT.US&lt;/stock_code&gt; &lt;/tech&gt; &lt;tech name=&quot;Google&quot; url=&quot;https://google.com&quot;&gt; &lt;stock_code&gt;GOOG.US&lt;/stock_code&gt; &lt;/tech&gt; &lt;tech name=&quot;Baidu&quot; url=&quot;https://baidu.com&quot;&gt; &lt;stock_code&gt;BIDU.US&lt;/stock_code&gt; &lt;/tech&gt; &lt;tech name=&quot;Sougou&quot; url=&quot;https://sougou.com&quot;&gt; &lt;stock_code&gt;SOGO.US&lt;/stock_code&gt; &lt;/tech&gt; &lt;tech name=&quot;Xiaomi&quot; url=&quot;https://mi.com&quot;&gt; &lt;stock_code&gt;01810.HK&lt;/stock_code&gt; &lt;/tech&gt;&lt;/compangy&gt; 在学习这种读写方式时，我也踩了一些坑。 XML有且只有一个根节点。 良好的方法封装有利于降低代码（模块）间的耦合； 错误信息输出、注释在新学习时必不可少； 好了，本期的分享就到此为止了。如果对你有启发，欢迎转载~","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"Qt","slug":"Qt","permalink":"https://blog.amoswu.cn/tags/Qt/"},{"name":"C++","slug":"C","permalink":"https://blog.amoswu.cn/tags/C/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.amoswu.cn/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Qt C++ MSVC 编译环境构建","slug":"Qt C++ MSVC 编译环境构建","date":"2020-08-19T16:00:00.000Z","updated":"2021-01-02T16:39:40.199Z","comments":true,"path":"2020/08/20/Qt C++ MSVC 编译环境构建/","link":"","permalink":"https://blog.amoswu.cn/2020/08/20/Qt%20C++%20MSVC%20%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA/","excerpt":"","text":"近期在Qt环境下编写C++代码时，我发现如果不安装 Visual Stadio 全家桶的话无法进行 MSVC编译。而我所面临的问题是，放在公司的这台笔记本存储空间只有128GB。对，你没有看错，是128G，而且是整个电脑。安装之前我忘记截图了，这里就po一张按照本文配置完后的磁盘截图。 当时，我就产生了一个想法，难道微软这么大的厂，不安装它的全家桶不至于让我们编译不了吧。在经过一番搜索之后，我发现了一个非常棒的解决方案。经过我一个多小时的测试，非常有效！！！ 废话不多说了，上干货。 OS version Windows10 Pro 64bit Qt version 5.14.0 Qt creator 4.11.0 MSVC version 2017 一、原理解析我们都知道，如果你安装了Visual Stadio全家桶，在Qt Creator里可以自动检测到MSVC的编译环境。为什么Qt能自动检测出MSVC环境呢？经过一番研究和搜集，我发现，在安装Visual Stadio过程中，Visual Stadio自动对Qt的环境做了适配。 这种适配，主要是通过修改注册表中某一个项来实现的。大致过程是这样的，在安装完Visual Stadio后，它自动修改了注册表，当你再打开Qt Creator时，Qt Creator会自动去查找这个注册表是否有变化，如果发生了变化，就自动适配变化后的编译器，否则，就不做任何修改。 究竟是哪个注册表让这种神奇的现象发生的呢？ Win 32bit环境下： HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStuidio\\SxS\\VS7 Win 64bit环境下：HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\VisualStuidio\\SxS\\VS7 Qt Creator会遍历SxS文件夹下的每一个项来比对注册表的变化。 如果键名（其实就是数字）大于 14（从 15 开始，即 msvc2017，那就把该键值（其实就是硬盘里的 vs 安装路径）后面拼接上 /VC/Auxiliary/Build 查看此处是不是有 vcvarsall.bat 文件。 否则（即键名小于等于 14），那就把该键值后面拼接上 /VC7 查看此处是不是有 vcvarsall.bat 文件。 上述的数值与MSVC版本的对应关系可以参考： https://www.cnblogs.com/zjutzz/p/6013783.html https://docs.microsoft.com/zh-cn/visualstudio/releases/2019/release-notes 正常情况下修改好这些注册表的键值，就能达到在Qt Creator使用MSVC编译代码的效果，除非你的电脑中找不到vcvarsall.bat文件。 二、详细操作步骤1.前期准备a.存储空间准备 安装好Qt Creator的前提下，至少预留10GB的磁盘空间。 没有安装Qt Creator的前提下，至少预留20GB的磁盘空间。 b.工具准备 Visual Stadio 2019 生成工具 下载地址：https://visualstudio.microsoft.com/zh-hans/downloads/ qt-opensource-windows-x86-5.12.4.exe （已安装请忽略） 下载地址：https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.12/5.12.4/ 2.安装工具篇幅所限，安装 Qt 的步骤在这里就省略了。 Visual Stadio 2019 生成工具的安装 打开已经下载好的安装包，第一次打开需要下载一些包文件，下载速度视网速决定，请耐心等待。 进入界面后，只需勾选C++生成工具，在右侧的安装详细信息菜单中再继续勾选你需要的工具。 Tips：Qt 5.14 推荐采用 MSVC 2017，下图右侧也有 2017的可选项，但是该工具默认链接的是2019版，并且也能正常使用，所以就先不折腾了，保持默认，只勾图中左侧一个勾，右侧会自动勾选默认的几个选项。 然后就耐心等待联网下载和安装。 等安装完毕，就可以关闭这个页面了。 3.增加Qt Creator组件如果你和我一样，在配置之前，已经安装完Qt Creator了，那请你继续看这一段。 打开Qt Creator安装目录 打开MaintenanceTool.exe 单击右下角设置，再单击资料档案库，添加临时资料档案库，地址是http://mirrors.ustc.edu.cn/qtproject/online/qtsdkrepository/windows_x86/root/qt/ Ps : 这里有个大坑，必须说一下，下载元信息响应会很慢，稍等10分钟左右就可以了。 选择要添加的组件 4.环境配置【重要！！！】如果这时候你直接打开Qt Creator，你会发现编程器里面还是空的。别着急，要想让自动Qt Creator 检测刚刚安好的编译器，还有关键一步。 关闭 Qt Creator； 按下 Windows + R 在弹出的窗口输入regedit，打开注册表编辑器； 打开后，在输入框粘贴下方的路径 \\HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\VisualStudio 右击，新建 -&gt; 项 ，连续新建两项，注意层次关系和大小写。 在 VS7 上新建字符串值，名称是16.0，值是 vs生成工具的安装目录下的一个子目录，具体看图中3处和横线处（仔细看图，我没写错），要保证横线处的路径下有红色箭头处的文件。 至此，再打开 Qt Creator 会发现已经自动识别编译环境并且添加好了。 当你兴奋地去新建一个测试程序时，你会发现一个新问题，这个编译环境不能单步调试。这是因为当前 Qt 无法调用 cdb.exe所致。下面我们手动为 Qt 与 cdb 工具建立链接。 1. 打开控制面板 依次找到 程序 -&gt; 程序和功能 ，右击截图中的 Windows SDK ，选择 更改。 选择 Change 勾选图中的选项。 再次重启，Qt Creator ，你会发现 Debugger下拉框里已经探测到 cdb 了。 参考文章： 正确在 Windows 上配置 MSVC(2019) 作为 Qt 编译器","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"Qt","slug":"Qt","permalink":"https://blog.amoswu.cn/tags/Qt/"},{"name":"C++","slug":"C","permalink":"https://blog.amoswu.cn/tags/C/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.amoswu.cn/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Qt C++ 对XML的增删改查","slug":"Qt C++ 对XML的增删改查","date":"2020-08-13T16:00:00.000Z","updated":"2021-01-02T16:39:43.377Z","comments":true,"path":"2020/08/14/Qt C++ 对XML的增删改查/","link":"","permalink":"https://blog.amoswu.cn/2020/08/14/Qt%20C++%20%E5%AF%B9XML%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/","excerpt":"","text":"最近，学习了Qt C++对XML的一系列操作。今天，把相关代码和注释贴在这里， 以备后续使用。 什么是 XML 可扩展标记语言（英语：Extensible Markup Language，简称：XML）是一种标记语言。标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。 ——from Wikipedia Qt 如何操作 XML.pro 文件增加 QT += xml模块。 .cpp 文件头部 #include &lt;QtXml&gt; 写入 XML源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364void Widget::write_xml()&#123; // 打开或创建文件 QFile file(&quot;test.xml&quot;); //相对路径、绝对路径、资源路径都可以 if(!file.open(QFile::WriteOnly | QFile::Truncate)) return; QDomDocument doc; // 写入XML头部 QDomProcessingInstruction instruction;//添加处理命令 instruction = doc.createProcessingInstruction(&quot;xml&quot;, &quot;version=\\&quot;1.0\\&quot; encoding=\\&quot;UTF-8\\&quot;&quot;); doc.appendChild(instruction); // 添加根节点 QDomElement root = doc.createElement(&quot;library&quot;); doc.appendChild(root); // 添加第一个子节点及其元素 QDomElement book = doc.createElement(&quot;book&quot;); book.setAttribute(&quot;id&quot;, 1); // 方式一：创建属性 其中键值对的值可以是各种类型 QDomAttr time = doc.createAttribute(&quot;time&quot;); time.setValue(&quot;2020/08/11&quot;); // 方式二：创建属性 值必须是字符串 book.setAttributeNode(time); QDomElement title = doc.createElement(&quot;title&quot;); // 创建子元素 QDomText text; // 设置括号标签中间的值 text = doc.createTextNode(&quot;C++ primer&quot;); book.appendChild(title); title.appendChild(text); QDomElement author = doc.createElement(&quot;author&quot;); // 创建子元素 text = doc.createTextNode(&quot;Stanley Lippman&quot;); author.appendChild(text); book.appendChild(author); root.appendChild(book); QDomElement price = doc.createElement(&quot;price&quot;); text = doc.createTextNode(&quot;$29.9&quot;); price.appendChild(text); book.appendChild(price); root.appendChild(book); // 添加第二个子节点及其子元素，部分变量只需重新赋值 book = doc.createElement(&quot;book&quot;); book.setAttribute(&quot;id&quot;, 2); time = doc.createAttribute(&quot;time&quot;); time.setValue(&quot;2020/08/10&quot;); book.setAttributeNode(time); title = doc.createElement(&quot;title&quot;); text = doc.createTextNode(&quot;Thinking in Java&quot;); book.appendChild(title); title.appendChild(text); author = doc.createElement(&quot;author&quot;); text = doc.createTextNode(&quot;Bruce Eckel&quot;); author.appendChild(text); book.appendChild(author); root.appendChild(book); // 输出到文件 QTextStream out_stream(&amp;file); doc.save(out_stream, 4); // 缩进4格 file.close();&#125; 调试结果 test.xml 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;library&gt; &lt;book time=&quot;2020/08/11&quot; id=&quot;1&quot;&gt; &lt;title&gt;C++ primer&lt;/title&gt; &lt;author&gt;Stanley Lippman&lt;/author&gt; &lt;price&gt;$29.9&lt;/price&gt; &lt;/book&gt; &lt;book time=&quot;2020/08/10&quot; id=&quot;2&quot;&gt; &lt;title&gt;Thinking in Java&lt;/title&gt; &lt;author&gt;Bruce Eckel&lt;/author&gt; &lt;/book&gt;&lt;/library&gt; 读取 XML源代码 123456789101112131415161718192021222324252627282930313233343536373839404142void Widget::read_xml()&#123; // 打开或创建文件 QFile file(&quot;test.xml&quot;); // 相对路径、绝对路径、资源路径 if(!file.open(QFile::ReadOnly)) &#123; return; &#125; QDomDocument doc; if(!doc.setContent(&amp;file)) &#123; file.close(); return; &#125; file.close(); QDomElement root = doc.documentElement(); // 返回根节点 qDebug() &lt;&lt; root.nodeName(); QDomNode node = root.firstChild(); while(!node.isNull()) // 如果节点不空 &#123; if(node.isElement()) &#123; // 转换为元素，注意元素和节点是两个数据结构 QDomElement e = node.toElement(); // 打印键值对，tagName和nodeName是一个东西 qDebug() &lt;&lt; e.tagName() &lt;&lt; &quot; &quot; &lt;&lt; e.attribute(&quot;id&quot;) &lt;&lt; &quot; &quot; &lt;&lt; e.attribute(&quot;time&quot;); QDomNodeList list = e.childNodes(); // 遍历子元素，count和size都可以使用，可用于标签数计数 for (int i = 0; i &lt; list.count(); i++) &#123; QDomNode n = list.at(i); if(node.isElement()) &#123; qDebug() &lt;&lt; n.nodeName() &lt;&lt; &quot;:&quot; &lt;&lt; n.toElement().text(); &#125; &#125; &#125; node = node.nextSibling(); &#125;&#125; 增加 XML 内容源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// 增加XML内容void Widget::add_xml()&#123; // 打开文件 QFile file(&quot;test.xml&quot;); // 相对路径、绝对路径、资源路径都可以 if(!file.open(QFile::ReadOnly)) &#123; return; &#125; // 增加一个以及子节点以及元素 QDomDocument doc; if(!doc.setContent(&amp;file)) &#123; file.close(); return; &#125; file.close(); QDomElement root = doc.documentElement(); QDomElement book = doc.createElement(&quot;book&quot;); book.setAttribute(&quot;id&quot;, 3); book.setAttribute(&quot;time&quot;, &quot;1999/09/09&quot;); QDomElement title = doc.createElement(&quot;title&quot;); QDomText text; text = doc.createTextNode(&quot;Pride and Prejudice&quot;); title.appendChild(text); book.appendChild(title); QDomElement author = doc.createElement(&quot;author&quot;); text = doc.createTextNode(&quot;Jane Austen&quot;); author.appendChild(text); book.appendChild(author); QDomElement price = doc.createElement(&quot;price&quot;); text = doc.createTextNode(&quot;$69.9&quot;); price.appendChild(text); book.appendChild(price); root.appendChild(book); if(!file.open(QFile::WriteOnly | QFile::Truncate)) &#123; // 先读进来，再重写 ，如果不用truncate就是在后面追加内容 return; &#125; // 输出到文件 QTextStream out_stream(&amp;file); doc.save(out_stream, 4); // 缩进4格 file.close();&#125; 删除 XML 内容源代码 1234567891011121314151617181920212223242526272829303132333435363738394041// 删除XML内容void Widget::remove_xml()&#123; // 打开文件 QFile file(&quot;test.xml&quot;); // 相对路径、绝对路径、资源路径都可以 if(!file.open(QFile::ReadOnly)) &#123; return; &#125; // 删除一个一级子节点及其元素，外层节点删除内层节点与此相同 QDomDocument doc; if(!doc.setContent(&amp;file)) &#123; file.close(); return; &#125; file.close(); // 一定要记得关闭，不然无法完成操作 QDomElement root = doc.documentElement(); QDomNodeList list = doc.elementsByTagName(&quot;book&quot;); // 由标签名定位 for(int i = 0; i &lt; list.count(); i++) &#123; QDomElement e = list.at(i).toElement(); if(e.attribute(&quot;time&quot;) == &quot;2020/08/09&quot;) // 以属性名定位，类似于hash方式 &#123; root.removeChild(list.at(i)); // 这里仅删除一个节点，可以加入break break; &#125; &#125; if(!file.open(QFile::WriteOnly | QFile::Truncate)) &#123; return; &#125; // 输出到文件 QTextStream out_stream(&amp;file); doc.save(out_stream, 4); file.close();&#125; 更新 XML 内容源代码 12345678910111213141516171819202122232425262728293031323334353637// 更新XML内容void Widget::update_xml()&#123; // 打开文件 QFile file(&quot;test.xml&quot;); if(!file.open(QFile::ReadOnly)) &#123; return; &#125; //更新一个标签项，如果知道XML的结构，直接定位到那个标签定点更新 //或者用遍历的方法去匹配tagname或者attribute，value来更新 QDomDocument doc; if(!doc.setContent(&amp;file)) &#123; file.close(); return; &#125; file.close(); QDomElement root = doc.documentElement(); QDomNodeList list = root.elementsByTagName(&quot;book&quot;); QDomNode node = list.at(list.size() - 1).firstChild(); // 定位到第三格以及子节点的子元素 QDomNode oldnode = node.firstChild(); // 标签之间的内容作为节点的子节点出现，当前是 How to learn Python node.firstChild().setNodeValue(&quot;Update_success&quot;); QDomNode newnode = node.firstChild(); node.replaceChild(newnode, oldnode); if(!file.open(QFile::WriteOnly | QFile::Truncate)) &#123; return; &#125; // 输出到文件 QTextStream out_stream(&amp;file); doc.save(out_stream, 4); // 缩进4格 file.close();&#125; 今天的分享就到这里，后续我会继续更新我的Qt学习记录~","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"Qt","slug":"Qt","permalink":"https://blog.amoswu.cn/tags/Qt/"},{"name":"C++","slug":"C","permalink":"https://blog.amoswu.cn/tags/C/"},{"name":"教程","slug":"教程","permalink":"https://blog.amoswu.cn/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"Qt Creator 编辑器下的代码格式化","slug":"Qt Creator编辑器下的代码格式化","date":"2020-08-10T16:00:00.000Z","updated":"2021-01-02T16:37:13.093Z","comments":true,"path":"2020/08/11/Qt Creator编辑器下的代码格式化/","link":"","permalink":"https://blog.amoswu.cn/2020/08/11/Qt%20Creator%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8B%E7%9A%84%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/","excerpt":"","text":"对于习惯使用VsCode、SublimeText、JetBrains 全家桶等编译器的开发人员来说，一键格式化代码是必不可少的功能。最近，我在进行Qt C++开发时发现，Qt Creator默认没有一键格式化代码相关的配置。经过几小时的面向搜索引擎解决问题后，我发现了一个可行的解决方案，今天在这里分享给大家。 大致的思路是可以以简单描述为：配置Beautifier:arrow_right:下载Artistic Style:arrow_right:配置 Artistic Style:arrow_right:设置快捷键。 下面我详细展开每个步骤，一一讲解。 本文只针对Windows操作系统下的配置进行验证，其他操作系统请自行搜索相关教程。 1.配置 Beautifier打开Qt Creator，依次点击菜单栏的帮助、关于插件。 展开C++选项卡，找到Beautifier(experimental)，勾选Load打开Beautifier。 此时，系统会提示重启Qt Creator后生效，我们立刻重启编辑器。 重启后，我们需要检查是否已开启 Beautifier，依次点击菜单栏的工具、选项。 如下图所示，在左侧有Beautifier选项卡时，说明开启成功。 2.下载 Artistic Style这里有两个下载源， 1）https://sourceforge.net/projects/astyle/files/ –来自官方（不推荐，下载速度较慢） 2）https://amos.lanzous.com/iXURDfi7zgb –本人上传（推荐，解压密码：as2020） 3.配置 Artistic Style下载完成并解压，将解压后的文件夹放到非中文路径下，接着打开上一张图片所示的选项窗口，点击Beautifier。 点击General选项卡，可根据自己的需求决定是否勾选 Enable auto format on file save（当文件被保存时自动格式化）。 在Tool栏选择Artistic Style，下面两项：Restrict to MIME Types和 Restrict to files contained in current project可以根据自己的需要自由选择。 点击 Artistic Style选项卡，在 Artistic Style command 选项中，点击浏览选择打开刚刚下载并解压好的 Artistic Style文件夹，再打开bin文件夹，找到AStyle.exe,点击打开，看到显示字色变成白色，说明打开成功。 继续给AStyle增加格式化代码的配置，这里提供了四个选项， .astylerc defined in project files 表示使用在项目文件 pro 中，定义 DISTFILES 中的任意 .astylerc 文件选项； Use specific config file 表示使用特定的某个配置选项文件； Use file .astylerc or astylerc in HOME或APPDATA 表示使用环境变量HOME（Linux）目录中的 .astylerc 选项文件，或者APPDATA（Windows）目录中的 astylerc 选项文件； Use customized style 表示使用用户自定义的选项配置（内容与astylerc文件相同）。 这里我选用的是第四个选项，自定义配置。这种配置方式相对简单，因为Artistic Style 本身提供了一些代码格式化的风格。 依次点击Add、输入自定义的一个名称、输入配置值，我这里选用的是GNU风格，Artistic Style 自带了15种配置风格。 这里介绍几种常见的代码风格，更多的代码风格请参考官方帮助文档。 allman风格 12345678910int Foo(bool isBar)&#123; if (isBar) &#123; bar(); return 1; &#125; else return 0;&#125; java风格 1234567int Foo(bool isBar)&#123; if (isBar)&#123; bar(); return 1; &#125;else return 0;&#125; kr风格 12345678int Foo(bool isBar)&#123; if (isBar)&#123; bar(); return 1; &#125;else return 0;&#125; gnu风格 12345678910int Foo(bool isBar)&#123; if (isBar) &#123; bar(); return 1; &#125; else return 0;&#125; linux风格 12345678int Foo(bool isBar)&#123; if (isFoo) &#123; bar(); return 1; &#125; else return 0;&#125; google风格 1234567int Foo(bool isBar) &#123; if (isBar) &#123; bar(); return 1; &#125; else return 0;&#125; 4.设置快捷键依次点击菜单栏工具、环境、键盘，找到FormatFile，然后点击Record录制自己的快捷键，最后点击Appply。 到这儿，我们Qt 环境配置的教程就结束了，后续我会继续带来Qt学习的相关笔记、想法和其他干货~","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"Qt","slug":"Qt","permalink":"https://blog.amoswu.cn/tags/Qt/"},{"name":"C++","slug":"C","permalink":"https://blog.amoswu.cn/tags/C/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.amoswu.cn/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Qt C++ Windows10环境配置","slug":"Qt C++ Windows10环境配置","date":"2020-08-09T16:00:00.000Z","updated":"2021-01-02T16:37:21.049Z","comments":true,"path":"2020/08/10/Qt C++ Windows10环境配置/","link":"","permalink":"https://blog.amoswu.cn/2020/08/10/Qt%20C++%20Windows10%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","excerpt":"","text":"笔者2020年开始，从事了C++开发的相关工作，目前国内主流的C++开发工具多建立在可视化框架Qt的基础上，这一篇我们就来讲一讲Windows10 系统下如何快速搭建Qt for C++环境。 1.简介1)C++简介C++是一种被广泛使用的计算机程序设计语言。它是一种通用程序设计语言，支持多重编程模式，例如过程化程序设计、数据抽象、面向对象程序设计、泛型程序设计和设计模式等。 2)Qt简介Qt是一个跨平台的C++应用程序开发框架。广泛用于开发GUI程序，这种情况下又被称为部件工具箱。也可用于开发非GUI程序，比如控制台工具和服务器。Qt被用于OPIE、Skype、VLC media player、Adobe Photoshop Elements、VirtualBox与Mathematica以及被Autodesk、欧洲空间局、梦工厂、Google、HP、KDE、卢卡斯影业、西门子公司、沃尔沃集团, 华特迪士尼动画制作公司、三星集团、飞利浦、Panasonic 所使用。 来自维基百科 ,IEEE Spectrum Programming Language 2020。 2. Qt下载目前Qt的同大多数框架一样，遵循两种版本推送方案，一种是稳定版，目前最新版本号为 5.15 ，另一种是预览版，目前最新版本号为 6.0 Snapshot。 Qt官网为 https://qt.io 。 Qt有多种下载方式，这里只贴出笔者使用的一种方式——清华大学开源软件镜像站 。此镜像站提供Linux、MacOS、Windows下的三种安装包，满足大多数开发者的开发环境。 3.安装在准备好安装包后，我们就要进入正题——安装Qt并配置环境了。 1)双击运行下载好的 qt-opensource-windows-x86-5.12.exe。 2)选择Next，进行下一步。 3)最新版会要求登录或注册一个Qt账户，这里的5.12.0版本支持跳过此步，最新版不支持，所以建议大家去注册一个。 4)继续点击下一步，再点击下一步，选择安装目录。 5)再次点击下一步，进行Qt creator 设置 选择显示的对应版本，我这里是Qt 5.12.0，勾选其中对应的Mingw，我这里的是Mingw 7.3.0 64bit。如果你还安装了Visual Studio开发环境，可以选择对应版本的MSVC。 6)再往后就是无脑下一步啦，知道看到下面这个界面，就说明安装和配置都完成啦~ 安装完成后，可以在开始菜单和桌面看到Qt Creator图标，双击打开就可以编写Qt C++代码咯~ :smile: 本期教程就到这里，下一期我们一起讲讲 Qt Creator 编辑器下的代码格式化~","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"Qt","slug":"Qt","permalink":"https://blog.amoswu.cn/tags/Qt/"},{"name":"C++","slug":"C","permalink":"https://blog.amoswu.cn/tags/C/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.amoswu.cn/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"聚焦，再出发","slug":"聚焦，再出发","date":"2019-12-30T16:00:00.000Z","updated":"2021-01-02T16:38:29.588Z","comments":true,"path":"2019/12/31/聚焦，再出发/","link":"","permalink":"https://blog.amoswu.cn/2019/12/31/%E8%81%9A%E7%84%A6%EF%BC%8C%E5%86%8D%E5%87%BA%E5%8F%91/","excerpt":"","text":"万物皆有裂痕，那是光照进来的地方。 ​ &nbsp; &nbsp; &nbsp; &nbsp;21世纪10年代的最后几个小时，马上就会伴随着21世纪20年代的新年钟声在每个人的生命中度过了。按照惯例，我今年会在这里写下10年年度总结的第2年（2019）。今年开始，我将年度总结的表述形式进行了重构，我将不再按照去年的“两段式”论述，而是采用新的“板块式”论述。回首过去的2019，感慨良多，收获良多。在这一时刻借此文“回顾、总结、聚焦、再出发”！ 1.讲不完的Flag故事 过去的一年，依然是在不断拔下Flag的一年，年初的那些Flag，有的已经坚持两年，而有的是新立的，但所有的Flag 在这一年的时光里都已变成了我生活中习惯的一部分。 序号 FLag名称 是否完成 / 数量 备注 1 看至少30部影片 是 / 30 2 读至少60本书 是 / 77 3 完成“十年总结”第2次 是 / 1 4 坚持每日4000+步 是 / 6551 5 △年更12+篇博客 是 / 21 后续补充的Flag 6 学习总时长2500h+ 是 / 2610 7 考研初试380+ - *数据截止至2019.12.25 我先逐一说一下以上数据的来源， 1是来自于我的腾讯视频APP、爱奇艺APP、Bilibili APP的“观看历史”； 2是来自于得到APP、微信读书、纸质书等综合统计； 3 的来自于本博客； 4 是来自于小米运动APP “2019运动年报”； 5 是来自于我的博客发文数； 6 是来自于番茄TODO APP、Forsest APP、MIUI 专注模式等综合统计。 这一年，多数的时间都用在了准备“考研初试”这项工程上，当然，这其中的很多收获。我会在崭新的2020年写下“我的 考研故事”，来纪念那段“扎根的日子”。在这一年拔下 Flag 的路上我还发现了一大批非常实用的APP，我将会在新增的第4个版块一同推荐给你。 随着一波旧的 Flag 拔下，新的 Flag 同样也要立起。2020年，我依旧会沿着过去两年的道路继续前行，同时也会在不同的方向开启新的尝试。2020的新 Flag 如下， 年观影量 - 30+ 年读书量 - 80+ 十年总结 - 第3次 日均步数 - 5000+ 年更博数 - 12+ 新学技能 - 1 新学技能，作为“彩蛋 FLag”，会在年末为大家揭晓，我们拭目以待。 2.放不下的时间朋友 考研初试过后，我就开始翻看我的手机相册，试图找寻时间的影迹。是的，我找到了这其中的一部分，让我借此一同分享。这里的分享对我来说，有的是这一年的一件大事，有的或是平凡小事的一件，但这都能说明我是“时间的朋友“。 2019 . 1 2019的第一个月从准备期末考试开始，上图是一张《操作系统》考前复习题，拍摄于2019.1.8，回想当时的场景，至今难以忘记，大学生涯的最后有期末考试的学期，就这样过来了。 2019 . 2 农历新年一过，又该踏上返校的旅程。这次的返校意义非凡，我在出发前，迎着朝阳拍下了上面这幅图，图中的地点是我的家乡“临沂长途汽车总站”的站前广场，拍摄于2019.2.17。这次过后，往返长途的都市之间，我就多了一种选择。 2019 . 3 春意渐浓，在着手准备考研初试的同时，我有幸参加了“小米之家专卖店石家庄万达广场店”的开业盛典，拍摄于2019.3.9。喜欢小米有两个原因，一个是对创始人雷军先生传奇人生的敬佩，另一个则是对小米公司价值观的认同，“永远相信，美好的事情即将发生”。 2019 . 4 经过一个月的激烈比拼，我的PPT作品有幸从成百上千份作品中脱颖而出，摘得了此次比赛的“四等奖”。是的，虽然对于一个大型比赛来说，四等奖或许不值一提，但是若加上以下条件，这个四等奖就显得意义非凡。 1.这个比赛的赛制是不限年龄，不限学校，不限地域，不管你是否是在校生； 2.我从接触PPT模板制作到参加比赛前后不到4个月的时间。 真心感谢这次比赛，让我和众多高校PPT制作者发生了连接。 2019 . 5 图片中是我和小伙伴们在团总支换届之际拍摄的合影，这个学生组织充满魔力，也带来希望。三年的时光都与它一同度过，我倍感荣幸。 2019 . 6 又到一年毕业季，送走了15级的学长学姐们，我们也踏入了大学生活的最后一年。 考研初试进入了白热化复习模式，刷题成为常态。 2019 . 7 备考进行时······ 2019 . 8 闭关修炼ing······ 2019 . 9 大四第一学期开学，考研倒计时100天。 应急培训，“救”在身边。 2019 . 10 共和国成立70周年，普天同庆。我们当下生活的时代，是前所未有的时代，也是最好的时代。 你好，得到大学！ 2019 . 11 第 7 支小米巨能写即将消耗殆尽。 2019 . 12 跑着跑着，天就亮了。 你好，临沂北站。 欢迎回来，时间的朋友！ 3.学不厌的知识技能 回望2019，我学会了好多知识，也掌握了很多技能。比如，考研资料如何搜集、什么是批判性思维、压力如何管理，PPT怎样做才好看、手机摄影怎样拍、网站数据如何抓取等等等等。如果有机会，我愿意与你分享。 4.聊不尽的年度推荐 今年开始，我特意将自己过去一年使用频率极高并且对每个人生活工作学习都会或多或少有帮助的APP、微信公众号推荐给正在读此篇博客的你。以后每年，定时更新。 APP类知识教育类APP——得到 效率工具类APP——番茄TODO 生活运动类APP——小米运动 微信公众号类时事点评类公众号——政事堂2019 科技资讯类公众号——36氪 经济资讯类公众号——每日经济新闻 新闻评论类公众号——呦呦鹿鸣 新潮幽默类公众号——小声比比 此刻的我正在同步观看罗振宇老师“时间的朋友”跨年演讲的第5期，你我皆是我辈之人。2019的最后一个小时，我在聚焦过去的一年，也在聚焦即将开始的一年。此时此刻我想用我在B站《小城夜食记》中看到的一句话来表达此刻的心情，“人生就像霞浦的滩涂，潮涨潮落下，埋藏的是别人无法想象的泥泞。我们都是滩涂上的行者，只问耕耘，不问收获。”2019聚焦每一个细节，2020向着更好的未来再次出发！ 2019/12/31 23:23 于山东 · 临沂","categories":[{"name":"年度总结","slug":"年度总结","permalink":"https://blog.amoswu.cn/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"年度总结","slug":"年度总结","permalink":"https://blog.amoswu.cn/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"}]},{"title":"辉煌70载，与您同在","slug":"辉煌70载，与您同在","date":"2019-09-30T16:00:00.000Z","updated":"2021-01-02T16:38:58.949Z","comments":true,"path":"2019/10/01/辉煌70载，与您同在/","link":"","permalink":"https://blog.amoswu.cn/2019/10/01/%E8%BE%89%E7%85%8C70%E8%BD%BD%EF%BC%8C%E4%B8%8E%E6%82%A8%E5%90%8C%E5%9C%A8/","excerpt":"","text":"爱祖国，首先要了解祖国；不了解，就说不上爱。 ——任继愈（前国家图书馆馆长） 70年，弹指一挥间。新中国在一代又一代的奋斗者接续奋斗下不断成长。我有幸成为奋斗者中的一员，在祖国母亲70华诞到来之际，我想借此文献上对祖国母亲的祝福！ 如同上面这句名言所说，爱祖国就应该先了解祖国。我搜集了新中国成立70周年以来的一些老照片，特意把它们制作成图片，与你一起共同回顾伟大祖国的成长历程。 网络上一直流行着一句话，“此生无悔入华夏，来生愿在种花家”。这也是新时代我们青年对伟大祖国表达的最深切的爱意。最近由陈凯歌等七位导演联合执导的电影《我和我的祖国》还没上映预售就突破了2亿元。“以小人物见证大时代，献礼新中国成立70周年”是这部影片的目标。电影上映前期，适逢电影主题曲《我和我的祖国》发行，还是那熟悉的旋律，还是那熟悉的歌词，不同的是歌曲背后的新故事。此歌曲的演唱者是华语乐坛著名的女歌手——王菲。王菲对歌曲的诠释也让这首经典旋律呈现出一种别样的自在、温暖、辽阔，营造出一种祥和的包容感。 歌曲25日在网易云音乐首发，短短五天的时间里，歌曲评论已超过8万条。我特意利用自己学到知识，抓取了这首歌9月25日-9月29日期间的3万多条热评数据，进行了整理分析，最终生成了如下的一张“词云热图”。 从图中热词的数目和字号大小，不难分辨，多数听过这首歌的网友都深深爱着祖国的这片热土，他们的声音也代表了今日中国14亿人民的心声。借此图，我也想深深的送上一句，“我的祖国，生日快乐！” 这盛世，如您所愿。我们生活的时代，是最好的时代，也是先烈们梦想中的时代。我相信，站在这通向伟大复兴的起点上，伟大祖国一定会越来越好！再一次，深深地祝福伟大祖国，繁荣富强！ 无论何时何地，我们都与祖国肩并肩。辉煌70载，与您同在！ 参考内容： [1] 微信公众号“拾遗” - 70张老照片告诉你，什么是新中国 [2] 百度百科 - 成渝铁路、武汉长江大桥等词条 [3] 百度百科 - 我和我的祖国（2019年陈凯歌等执导电影）词条 [4]网站 - 网易、阿里巴巴、腾讯等各大企业官网 [5]网易云音乐 - 《王菲-我和我的祖国》 部分图片来源于网络，侵权请联系删除","categories":[{"name":"特别博文","slug":"特别博文","permalink":"https://blog.amoswu.cn/categories/%E7%89%B9%E5%88%AB%E5%8D%9A%E6%96%87/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"特别博文","slug":"特别博文","permalink":"https://blog.amoswu.cn/tags/%E7%89%B9%E5%88%AB%E5%8D%9A%E6%96%87/"}]},{"title":"为什么“中台”这么火？","slug":"为什么“中台”这么火？","date":"2019-08-31T16:00:00.000Z","updated":"2021-01-02T16:40:56.191Z","comments":true,"path":"2019/09/01/为什么“中台”这么火？/","link":"","permalink":"https://blog.amoswu.cn/2019/09/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E2%80%9C%E4%B8%AD%E5%8F%B0%E2%80%9D%E8%BF%99%E4%B9%88%E7%81%AB%EF%BC%9F/","excerpt":"","text":"全文约2800字，阅读需要8分钟。 00.引言从去年10月份以来，国内几大互联网公司相继进行了组织架构调整，这其中不乏有BAT（百度、阿里、腾讯）、海尔、滴滴、京东等公司，值得注意的是这一轮的组织架构调整各大公司都多出了一个名叫“中台”的架构。 在这样一个追求管理个性化的互联网时代，为什么国内各大互联网都要搭建一个或多个“中台”呢？说来原因有很多，我们不妨先从认识“中台”说起。 01.谁发明了“中台”？“中台”最早是由美军的作战体系演化而来的。美军在二战时期，以军来为单位作战；到了越南战争时期，以营为单位作战；再到中东战争的时候，则以7人或者11人的极小班排去作战，这是今天最灵活的军事组织，也是核心竞争力和打击能力最强的一个组织。而美军之所以能灵活作战，敢放这么小的团队到前方，是因为有非常强的导弹指挥系统，有非常强大的中台能力，能支持这样的小团队快速做判断，并且引领整个打击。 有着军事背景的“中台”又是怎样“跳槽”到互联网行业的呢？ 这就得说一说这家来自芬兰的游戏公司了，它的作品具有强大的生命力，它的全球累计用户规模已经超过10亿，它2015年时的估值就达到了52.5亿美元，它就是——Supercell。到目前为止，该公司已经开发和运营了包括《部落冲突》（Clash of Clans）、《海岛奇兵》（Clash Royale）在内的十余款超火爆游戏。这家公司的一年利润就有15亿美元，而这家公司的员工人数仅有不到200个人，公司里每一个开发游戏的小团队仅有6-7人。 读到这里，相信你已经猜到了。正是Supercell首先在互联网行业构建了“中台”。他们将游戏开发过程中公共和通用的游戏素材和算法整合起来，并积累了非常科学的研发工具和框架体系，构建了一个功能非常强大的中台。就这样，一套素材被用于多个项目的同时开发，“中台”架构就进入了人们的视野。 “中台”又是如何被引入到国内的呢？ 那就得从阿里巴巴说起了。2015年，阿里巴巴董事局主席、阿里创始人马云带领阿里一行高管前往Supercell公司进行了考察，考察过程中他们了解到在Supercell公司5-7人组成的独立开发团队被命名为“Cell”（细胞），这些Cell的协作得益于背后强大的中台的支撑。 回国后，阿里巴巴集团于2015年年底正式启动了“中台战略”，构建符合IT时代的更具创新性、灵活性的“大中台、小前台”组织机制和业务机制，即作为前台的一线业务会更敏捷、更快速适应瞬息万变的市场，而中台将集合整个集团的运营数据能力、产品技术能力，对各前台业务形成强力支撑。 从“中台”的诞生，到“跳槽”再到“移民”，中台的前世就我们已经了解清楚了。接下来我们一起来聊聊——什么是“中台”？ 02.什么是“中台”？迄今为止，“中台”（Middle Office）的定义有很多，我认为，下面两个定义是对“中台”的定义最佳的阐述。 定义1来自 ThoughtWorks 高级咨询师 王建 中台是真正为前台而生的平台（可以是技术平台，业务能力甚至是组织机构），它存在的唯一目的就是更好的服务前台规模化创新，进而更好的响应服务引领用户，使企业真正做到自身能力与用户需求的持续对接。 定义2来自得到 中台是一个能同时支撑多个业务，让业务之间的信息形成交互和增强的机制。 怎么？是不是有点抽象？让我来举几个例子帮助你理解一下什么是“中台”。 它可以是我们家用的“路由器”，我们在家要连接互联网，肯定离不开WiFi，而发射WiFi信号的路由器，在我们家庭上网的场景中充当的就是“中台”的角色。它即负责连接我们的联网设备，又负责与外网发生连接。 它也可以是维修工人的“工具箱”，在维修不同的机器时，都可以从工具箱中找出顺手的工具，从而避免“黑瞎子掰玉米”的现象。 它还可以是火遍全球的“老干妈”，吃面时加入它“调味”，烧菜时加入它“增香”，拌凉菜时加入它“提味”，这就是强大的“万能调料”。 说完中台的概念，我们还需要了解一下，当下互联网产业中，“中台”有哪些常见类型？ 在有些人眼里：中台就是技术平台，像微服务开发框架、Devops 平台、PaaS 平台，容器云之类的，人们都叫它“技术中台”。 在有些人眼里：中台就是微服务业务平台，像最常见的什么用户中心，订单中心，各种微服务集散地，人们都叫它“业务中台”。 在有些人眼里：中台应该是组织的事情，在释放潜能：平台型组织的进化路线图 (豆瓣) 中就提出了平台型组织和组织中台的概念，这类组织中台在企业中主要起到投资评估与投后管理的作用，类似于企业内部资源调度中心和内部创新孵化组织，人们叫它“组织中台”。 03.为什么选择“中台”？选择“中台”有很多原因，总结起来就是“实惠、精简、高效”。展开来说，“中台”具有以下优势： 服务重用：真正体现SOA理念的核心价值，松耦合的服务带来业务的复用； 服务进化：随着新业务的不断接入，共享服务也需从仅提供单薄业务功能，不断的自我进化成更健壮更强大的服务，不断适应各种业务线，真正成为企业宝贵的IT资产； 数据累积：各个业务的数据都沉淀在同一套中台服务，可以不断累积数据，最终发挥大数据威力； 快速响应：更快的通过共享服务的组合响应新业务； 降低成本：对于新业务，无需再投入新的重复的开发力量，减少人员成本； 效能提升：开发人员更专注某一领域，开发更快，更易维护。 众所周知，多数互联网企业的技术架构都是由“前台 + 后台”构成。而这种架构在大型项目以及多项目开发时存在很多问题，比如决策效率低下、“资源冗余、浪费频发”、“项目间与项目内协作能力较差”等等。这些问题在IT圈被多数从业者熟知的一个词就是“重造轮子”。 重造轮子，（英语：Reinventing the wheel）是重新创造一个已有的或是早已被优化过的基本方法，此用语常出现在软件开发或其他工程领域中。 搭建“中台”后，能有效解决上述问题，同时也完成了架构的“去中心化”，有效避免中心热点、雪崩等情况发生。而这其中“数据中台”的搭建，更加有益于大数据的发展，让数据高效、有序、合理地流通于各个业务之间，从而增强用户体验。 读到这里，你可能会不禁疑问，“中台”火归火，可是对于我自己这样一个个体来说又有什么意义呢？ 04.“中台”给我们的启示是什么？我个人非常认同“中台“提供给我们的不仅仅是企业的架构调整，而是一种”思维方式“。一种可以从具体的事务中抽离成普适的经验的方法论。 拿我个人来说，我之前在学生组织工作时，为了协调多部门搞好一个活动，常常会有活动总结会议。这种会议的目的在于，大家可以坐在一起，把各部门遇到的问题及解决方案，抽象成一条或多条适用于其他活动的经验，以便于推动组织更好地向前发展。学生组织主办的活动也好，公司部门也罢，都可以是Supercell中的一个Cell，学会这种思维，会让我们积累更多更有益于自身和组织发展的经验，形成增强回路，从而推动人生的“飞轮”不断向前！ 感谢你读到这里，祝你也能拥有“中台思维”！ 参考内容： [1] InfoQ - 白话中台战略（一）：中台是个什么鬼？ [2] 维基百科 - “重造轮子”的词条 [3] 钟华 - 《企业IT架构转型之道 阿里巴巴中台战略思想与架构实战》 [4] CSDN - 阿里中台(看图不说话) [5] 邵恒头条 - 2019.06.19 互联网公司为什么都在搭建“中台”？ [6] 架构师技术联盟 - 关于中台，你可能不知道的那些事！ [7] 维基百科 - “Supercell (游戏公司)”的词条 [8] Our story × Supercell - Supercell 官网 [9] 知乎 - 互联网公司中所谓中台是怎么定义的？ *部分图片源于网络","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"随笔","slug":"新知/随笔","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"随笔","slug":"随笔","permalink":"https://blog.amoswu.cn/tags/%E9%9A%8F%E7%AC%94/"},{"name":"新知识","slug":"新知识","permalink":"https://blog.amoswu.cn/tags/%E6%96%B0%E7%9F%A5%E8%AF%86/"}]},{"title":"什么是“沙盒创新”以及它背后的启示","slug":"什么是“沙盒创新”以及它背后的启示","date":"2019-08-02T16:00:00.000Z","updated":"2021-01-02T16:40:29.404Z","comments":true,"path":"2019/08/03/什么是“沙盒创新”以及它背后的启示/","link":"","permalink":"https://blog.amoswu.cn/2019/08/03/%E4%BB%80%E4%B9%88%E6%98%AF%E2%80%9C%E6%B2%99%E7%9B%92%E5%88%9B%E6%96%B0%E2%80%9D%E4%BB%A5%E5%8F%8A%E5%AE%83%E8%83%8C%E5%90%8E%E7%9A%84%E5%90%AF%E7%A4%BA/","excerpt":"","text":"全文约3800字，阅读需要13分钟。 最近《邵恒头条》有一期栏目谈的是“以色列怎么做到‘沙盒创新’？”，收听过后，我大为触动。今天就和你聊一聊我从以色列”沙盒创新“背后得到的启示，以及我的一些思考。 一、什么是“沙盒创新”？首先来聊一聊什么是”沙盒创新“。如果你从未听说过这个词，单从字面意思上来理解，可以解释为”在某一不能动盒子内或者外进行的创新“。当然，如果你有计算机相关的知识，可能会知道”沙盒“是一个计算机术语，它是计算机安全领域的一种安全机制，它会为运行中的程序提供隔离环境。加上这一层，我们就可以给”沙盒创新“下一个准确的定义了。所谓的”沙盒创新“，就是盒子里装满了细沙，如果盒子不能动，产生的创新。换句话说，就是外部条件的限制，完全不能改变的情况下的创新。 我想，读到这里，你也一定会和我一样，产生了一个疑问——外部条件没法改变，从哪里还能产生创新呢？这个问题，同样也困扰了坐落于地中海东南岸及红海亚喀巴湾北岸的一个国家——以色列的人民。 二、以色列的“沙盒创新”一提到以色列，大多数人脑海中会浮现诸如“犹太人最多的国家”、“世界上人均年读书量最多的国家”、“发达国家”等等这样的标签。在开始介绍以色列的“沙盒创新”之前，请你和我一起先认识一下以色列这个国家。 以色列是一个位于西亚，坐落于地中海东南岸及红海亚喀巴湾北岸的主权国家。国土面积约为我国的0.2%**，人口总数约为900万（截止至2018年），人类发展指数0.903**，位列世界第22位（截止至2018年）。 人类发展指数（英语：Human Development Index，缩写为HDI），是联合国开发计划署从1990年开始发布用以衡量各国社会经济发展程度的标准，并依此将各国划分为：极高、高、中、低共四组。只有被列入第一组“极高”的国家才有可能成为已开发国家。指数值根据出生时的平均寿命、受教育年限（包括平均受教育年限和预期受教育年限）、人均国民总收入计算出，在世界范围内可作为各国之间的比较。分界标准：极高：0.800以上高：0.7990.700之间中：0.6990.550之间低：0.549以下 截止至2018年，中国大陆的人类发展指数为0.752，位列世界第86位。 —— 来自 维基百科“人类发展指数”和“人类发展指数列表”词条 以色列为代议民主制国家，采用议会制、比例代表制和普遍选举制。总理为政府首脑，议会为立法机关。以色列为一发达国家，经济合作与发展组织成员国，2018年其名义国内生产总值排名世界第34。该国具有较高水平的劳动力，为全球教育程度最高的国家之一，其公民拥有高等教育学历的比例亦为世界最高之一。其生活水平为中东最高和亚洲第四高，其人口预期寿命亦居世界前列。 读完上面的介绍，是不是刷新了你对以色列这个国家的认识呢？ 下面我们回到正题，聊一聊以色列的“沙盒创新”。在这个国土面积小的可怜的弹丸之地，有4000多家科技创业公司用他们的方式改变着我们每一个人的生活。是的，是改变我们每一个人的生活。 读到这里你可能不信，让我来给你举上几个例子。我们日常生活中的很多发明都源自于以色列，比如 我们目前离不开的U盘，就是以色列人Amir Ban, Dov Moran 和 Oron Ogdan发明的，他们都来自以色列M-Systems公司； 还有今天中国大多数人都在用的即时通讯工具QQ，它脱胎于ICQ，ICQ是1996年由以色列Mirabillis公司发明的； 还有我们经常吃的圣女果，这种可爱的小西红柿的野生品种来自南美，目前人工种植的有三个品种，其中最主要的特别甜美的品种Tomaccio是在以色列希伯来大学教授Prof. Nahum Keidar 和 Prof. Chaim Rabinovitch领导下花了十二年时间杂交培育出来的。 这些都是以色列发明创新的“冰山一角”，读到这里，相信你已经消除了“以色列是一个改变我们每一个人生活的国家”的疑问了吧。 这些发明和创新都离不开一个共同的密码，创新还有共同点？是的，这个密码究竟是什么呢？ 第一，有限制才有创新； 第二，创新有模式可循。 这听起来是不是有一点反常识？我们经常会听到这样的抱怨，条件不允许、人才储备不够，我们不能创新，也就是限制太多，将创新扼杀在了摇篮里。但以色列SIT全球创新公司副总裁泰马尔·车路奇却说，“限制才能成为激发创新的动力”。正是种种的“限制”，逼着以色列人必须创新，因为“不创新就会死”。 今天被普及到全世界的滴灌技术，就是很好的例子。之所以会发明滴灌技术，就是因为以色列太缺水了，必须要让每一滴水都发挥出最大的作用。所以以色列人在灌溉设备上，用足了高科技，比如智能监控、防堵塞的药剂、充气系统、回收循环系统等等。他们生生把水的利用率，从传统的15%提升到了95%以上。 靠着滴灌技术，以色列不仅实现了农产品自给自足，还能出口欧洲国家。而且，滴灌技术还被推广到了全世界。所以你看，正是以色列的水资源限制，激发了农业技术的创新。 让人感到更反常识的是第二点，“创新有模式可循”，即以色列人认为创新是可以复制的。这听上去太不可思议了，我们平时所说的灵感啊、创新啊，都是灵光乍现才有的，怎么一下子就变得可能有现成的模式，而且还能复制了呢？ 要解答这个问题，我们首先要明确我们所说的创新到底是什么，以色列人的定义是”新的、有价值的、可行的“这三个要素同时满足才构成创新。 紧接着你要思考，如果要实现这样的创新，我们需要打破什么？这也很明确，就是打破思维定势。 以色列人把思维定势梳理成三种最常见的类型，从小学就开始训练学生如何打破思维定势： 第一种是功能型的思维定势，就是习惯性把事物锁定为某种传统功能，比如墨镜，只有遮阳功能。但在未来，它也可能变成一个可穿戴的微型显示器。 第二种是结构型思维定势，也就是你认为，一个事物的结构就应该是你看到的那个样子。比如，最早的冰箱因为没有电，所以总是把大冰块置于顶部进行自上而下的冷气循环，这就导致最早的那些电冰箱的设计也总是冷冻室放在上面，冷藏室放在下面。但其实，我们显然用冷藏的功能更频繁，为了便利，应该放在上面嘛。 第三种是关系型思维定势，就是认为两个事物之间的关系是固定的。比如说，孩子看电视，你觉得影响学习，就不让他看。你认为，电视和学习之间，是势不两立的关系。但其实，你可以和孩子约定，每看一小时电视，就得读一小时书。这样，看电视和学习就变成了互相促进的关系。 打破这样的思维定势，又要靠什么？泰马尔说，SIT就是一套帮我们打破思维定势的创新方法论。SIT是Systematic Inventive Thinking的缩写，意思是系统创新思维。 这套方法论讲究的是不做加法、不从外部要资源，也就是说，不去试图改变盒子本身。但是，你要从“盒子里面”的系统着手，聚焦于这个系统当中到底有哪些已有的资源，是否可以充分开掘其新的价值。这就是一种不抱怨、不抗拒的沙盒创新。 SIT创新思维，总共包括五种核心工具。不过，我认为这里面最实用、最容易操作的工具，是减法工具。我来给你介绍一下。 简单来说，减法工具指的是，在一个系统里，减去最重要的部件，反而却发掘其他辅助部件的潜能。 举个简单的例子来说，洗衣液。洗衣液的功能，当然是把衣服洗干净，所以对洗衣液来说最核心的部件，就是去污成分了。那么，如果你把这部分拿走呢？不能去污，其实还有香气呀。所以，一个不能去污的洗衣液，可以当作衣服的清新剂。 这就很有用啊，因为现代人换衣服很频繁，每天穿一套不一样的，非常普遍。穿一次就洗吧，洗衣液的去污成分对衣服耗损很大。不洗吧，穿着又别扭。清新剂恰恰解决了这个问题。这个想法，以色列SIT公司在1996年就提出来了。四年之后，宝洁公司推出了一款叫Febreze的清新剂，创造了清洁市场的新品类。 这种减法工具就是以色列的系统创新思维的核心方法，是不是读完让人耳目一新呢？ 三、我的几点思考在真正了解了什么是“沙盒创新”之后，我产生了几点思考，下面和你一起聊一聊。 1.减少抱怨，多多行动。做事和创新在以色列人的角度，都是有规律可循的。找到这个规律的前提是“减少抱怨，多多行动”。正如我们在本文刚开始讨论的那样，以色列被我们熟识多发生在每年的“世界读书日”，这一天，多数商家和媒体都会宣传读书的重要性，这其中就必须要提到世界上最勤奋的以色列人的人均年读书本数。当代书画家范增曾经说过，“苍天没有给我什么独得之厚，我的每一步前进，都付出了通宵达旦的艰苦劳动和霜晨雨夜的冥思苦想”。所以，行动起来吧，中彩票的第一步是买一张彩票，对吗？ 2.学会做减法，轻装上阵。生活在种系统复合环境下的我们，无论是事业、家庭还是个人，都在各自不同的系统中运行着。要想充分发掘这个系统的潜能唯有做好减法，轻装上阵，才会又不一样的风景呈现在我们面前。 3.考虑事情多从整体出发，会有意想不到的收获。考虑事情多从整体出发，会有意想不到的收获。换一种方式讲，就是要有大局观。这好比这几个月以来，被美国举国家之力制裁的华为一样，要不是创始人任正非的远见与大局观，中国怕是又要出现一个“中兴”。整体性看待事物的重要性就不言而喻了。 4.要不断打破思维定势，变得更加理性。这一点思考也是我最近在学习得到课程《蔡钰·批判性思维15讲》时得到的一个共通的思考，正如课程中所说“你的知识面越广，你的思维局限和漏洞越少，你的思考就越自由”。而拥有多大的思考自由度，取决于你是否有更少地思维定势，或者说是否有批判性思维。所以，勇敢迈出那一步吧，打破那蛋壳一样的思维定势，看见不一样的世界。 以上，就是我对“什么是’沙盒创新‘以及它带给我的思考”的全部内容，感谢你读到这里，祝你也能做一个不断创新的人。 参考内容： [1] 邵恒头条 - 2018.8.1 以色列怎么做到“沙盒创新”？ [2] 百度百科 - “沙盒”的定义 [3] 维基百科 - “人类发展指数”、“人类发展指数列表”词条 [4] 十个影响我们日常生活的以色列发明 - 张平特拉维夫的新浪博客 [5] 得到课程《蔡钰·批判性思维15讲》","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"随笔","slug":"随笔","permalink":"https://blog.amoswu.cn/tags/%E9%9A%8F%E7%AC%94/"},{"name":"新知识","slug":"新知识","permalink":"https://blog.amoswu.cn/tags/%E6%96%B0%E7%9F%A5%E8%AF%86/"}]},{"title":"什么是“认知折叠”？","slug":"什么是“认知折叠”","date":"2019-07-02T16:00:00.000Z","updated":"2021-01-02T16:40:43.945Z","comments":true,"path":"2019/07/03/什么是“认知折叠”/","link":"","permalink":"https://blog.amoswu.cn/2019/07/03/%E4%BB%80%E4%B9%88%E6%98%AF%E2%80%9C%E8%AE%A4%E7%9F%A5%E6%8A%98%E5%8F%A0%E2%80%9D/","excerpt":"","text":"最近在得到大学2019夏季班开学典礼演讲和在得到APP收听《罗辑思维》第762期时，学到了一个新的知识——认知折叠。 下面音频与原文一同分享。 音频在这儿(●—●) 策划人：李仲轲 和你一起终身学习，这里是罗辑思维。 昨天，我们在上海举行了得到大学2019夏季班的开学典礼。我是最后一个发言的，在发言里面，我跟大家讲了一个“认知折叠”的新概念。 这是什么意思呢？这是衡量人类文明进步的一种重要尺度。 过去，我们说文明进步，主要是用数量来衡量的：财富越来越多、效率越来越高、能量调动的量级越来越大等等，都是数量概念。仅仅如此吗？不，除了数量之外，还有一个“认知折叠”的维度。 我们来看一个例子：午餐肉。我们很多人喜欢吃午餐肉，尤其是涮火锅的时候。午餐肉谁发明的呢？二战之前的美国人。 有一个说法，说让美军赢得第二次世界大战的，除了武器装备将军士兵之外，就是这样不起眼的东西，午餐肉。 给你看几个数字，二战中，美国军人靠着午餐肉，一天能够摄入至少4300卡路里的热量。美国的对手德国军队呢？平均一人一天是3000卡路里的热量。日本人更惨，每天只有2000卡的摄入量，还不到美国的一半。 你可能对数字还没什么概念。举个例子。我，罗胖，不用干体力活。按照世界卫生组织的标准，每天需要2300卡。你就明白了，二战时候的日军在战场上拼死拼活，每天的卡路里摄入量居然比不上我。吃不饱饭，打仗这不肯定要输么？ 你可能会说，这不奇怪啊。日本穷，美国富。美国那么广大的国土，粮油肉蛋奶出产丰富，士兵吃得好，这不是应该的吗？没那么简单。战场，不是市场。你国力强、有充足的供应就可以了。战场的情况瞬息万变，极其复杂。 你就想，美国在二战期间，总兵力有上千万人，而且分布到欧洲战场和太平洋战场。细分到每个兵种，每个部队，战场不一样，执行的任务不一样，很多还都在运动中。如果你是管美军后勤的官员，就算你手头有无穷无尽的资源，仅仅面对这个巨大的复杂性，你是不是要疯？我就看到过一个材料，说第一次世界大战的时候，美国的统帅潘兴将军在欧洲打仗，还要通知国内后勤部门，说你们别往欧洲运什么浴缸、书橱、割草机和痰盂了。你看，这么大规模的物质投送，不是你能不能在数量上能保证供给的问题。是细部的复杂性难题，解决不了。稍一出错就要惹大麻烦。 别的不说了，仅仅在战场上让队伍吃饱饭这件事，请问你后勤部门怎么做？难道每个小分队都配一个炊事班？ 那这个炊事班，要不要带食材？要不要带锅具餐具？要不要带燃料？各自都带多少？带少了不够吃，带多了，不是资源不够的问题，是影响军事任务的执行。你怎么保证把合适数量，合适结构的食物和物资，投放给合适的部队呢？这是个大难题吧？ 刚才我们说，日本军队一天一人只能有2000卡路里的热量，其实不完全是因为国家穷，粮食资源不够。还因为他们吃的主要是米饭做的饭团。就算没有肉类和蔬菜，仅仅保证给士兵吃饭团，复杂度都高得吓人。你得带米吧？得有柴有锅有水才能煮饭吧？仅仅这些条件，在战场上满足起来就很不容易。而且米饭，做熟了很快就会馊，所以也不能一次做成长期储存。而且炊事班在战场上是不能随便生火的，炊烟一飘出去，被敌人侦察到了，接下来可不就被一锅端了么？你看，在很多情况下，就算部队有米有柴，配送不上去，或者不方便做，士兵在战场上也得饿肚子。 明白了这一点，你再回头来看午餐肉，就知道它的好处了。 午餐肉是罐头装的熟食，不需要额外加工，想吃热的，用开水烫一下就可以。吃起来也很方便，开罐即食，用勺子舀着就行。要分给别人也很容易，把肉拿出来，用刺刀切成小块就可以了。什么炊事班，什么柴米油盐，什么餐具灶具，什么做饭时机，一概不用。 不仅是热量的总量问题，还有营养搭配问题呢？干过体力活的人都知道，消耗了大量体力之后，光是吃干粮、补充碳水化合物是远远不够的，人必须得吃蛋白质、吃油脂。这对午餐肉来说，不是问题，只需要在后方的工厂里面改变一下配方就行了。一盒午餐肉里面不仅有肉，还有淀粉，还可以加入你想加入的任何其他营养物质。 还有一点，你想过没有？毕竟那是战争时期，即使像美国那么富有的国家，资源也是紧缺的。实际上二战的时候，美国也实施过粮食配给。那怎么才能保证战场上的士兵都能吃到肉呢？秘密也在午餐肉的罐头盒子里。 我们都知道，美国人是不怎么吃碎肉，他们要吃整肉，更是不吃动物内脏下水的。但是做成午餐肉，你还分得清什么是碎肉，什么是内脏下水吗？据说当年生产午餐肉的荷美尔公司，可以做到猪从工厂的一头进去，白骨另一头出来，一点都不浪费。如果是直接供应整块的肉，那肉的质量稍有变化，哪怕肉稍微碎了一点，士兵都看得出来，这影响士气。但是午餐肉是把肉、淀粉、盐、食品添加剂搅在一起的，成分变化没那么明显。实际上，到了二战后期，美国的食品供应也紧张，午餐肉里的淀粉比例也在不断上升，到了后来，甚至肉的成分都变了，从肥瘦混合的猪肉、变成纯肥肉、最后甚至会添加猪内脏或者其它肉。 不仅如此，还有运输上的优势。午餐肉压缩在罐头里面，运输起来非常方便，无论是轮船火车运，还是飞机空投都可以。还不怕变质，在没有冰箱的情况下能放3年。还有一点，运输的复杂性也大大降低，不会出现给一个部队运去200斤蔬菜，但是没有肉蛋奶的情况。这种错误不会发生。就那么一盒盒的，数数儿就可以了。在整个二战中，至少有7000万公斤，差不多是1.4亿罐的午餐肉被运往了前线，让美国大兵敞开了吃。美国人就是这么打赢二战。 说了这么多，我们再来看午餐肉的本质到底是什么？它不止是一块装在罐头里的肉，他本质上是把畜牧业、食品加工业、食品化学、交通运输业等多个领域，解决各种问题的方法，一个庞大的认知体系，全部封装进了一个罐头里，大大降低了问题的复杂性。这是什么，这就是我们今天要讲的那个主题：认知折叠。 你看是不是？除了数量之外，这是衡量人类文明进步的一个重要尺度。 过去有一期罗辑思维节目，我们曾经讲过集装箱的故事。就那么一个方方正正的大铁箱子，也没有多少技术含量，但是它就是能把国际海运的成本降下来90%以上，彻底改变了20世纪全球供应链的样子。把巨大的复杂性折叠成简单的工具，这也是认知折叠。 还有，得到App里面的《薄世宁·医学通识50讲》里面讲到药，他给药下的定义是，药是医学解决方案的物质载体。每一颗药，也是把现代医学对这个病的所有知识，那是个多么复杂的体系，折叠进了一颗小小的药丸，这也是认知折叠。 你看，文明的进步，不仅取决于拥有多少资源、能量和信息，更取决于能把这些资源、能量和信息折叠成多么普通的样子。 昨天是得到大学2019夏季班的开学典礼。最后说几句得到大学。 我们创办的得到大学，不是商学院，也不止针对成功人士，它服务于所有正处在事业上升期的对自己有期待的人。我们挑选那么多各行各业的精英，做你的同学，花那么多精力大家打磨知识产品，目的是啥？其实也是希望，能在这三个月的学习期间，为你做一次奇妙的“认知折叠”。把那么多复杂的知识，各行各业的经验，为你折叠成普通的样子，让你打包带走。 现在，得到大学2019秋季班已经开始招生。我把报名链接放在这个音频附属的文稿里面。如果你报名得到大学，如果你被成功录取，我知道，因为你有“认知折叠”，所以你会不虚此行。 好，罗辑思维，明天见。","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"随笔","slug":"新知/随笔","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"新知识","slug":"新知识","permalink":"https://blog.amoswu.cn/tags/%E6%96%B0%E7%9F%A5%E8%AF%86/"},{"name":"转载","slug":"转载","permalink":"https://blog.amoswu.cn/tags/%E8%BD%AC%E8%BD%BD/"}]},{"title":"汇编与接口知识梳理","slug":"汇编与接口知识梳理","date":"2019-06-18T16:00:00.000Z","updated":"2021-01-02T16:36:55.411Z","comments":true,"path":"2019/06/19/汇编与接口知识梳理/","link":"","permalink":"https://blog.amoswu.cn/2019/06/19/%E6%B1%87%E7%BC%96%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/","excerpt":"","text":"马上就迎来大学生涯中最后一次期末考试了，在这里我把《微机原理与接口》课程的知识按照张春芳老师给的提纲进行了梳理。下面正文是文字的形式，文末还有思维导图的形式一并共享给大家，期待和大家一起考出好成绩。 说明按照老师给的提纲顺序，我对每一个点进行了梳理，覆盖率98%，并在每一个点后面附上了课本出处页码，以方便查阅课本原文。有的点没有达到100%覆盖，是我复习过程中遇到的问题，我会在向老师求教后及时更新。 这一份知识梳理是我在刚刚过去的2天里，利用了20多个小时的时间，翻阅课本，查阅PPT后逐字手敲的结果，可能其中会有疏漏，还请见谅！ Chapter 1-31.二进制数据类型、表示、范围及其转换 P11-13 定点整数 无符号整数：只表达0和正整数 8位范围：0-255 N位范围：0~2^N-1 有符号数：占用机器数的最高位当符号位，0表示正，1表示负 原码和反码 补码 原反补码的转换 正数的原码、反码和补码都相同。 负数原码和反码的相互转换：符号位不变，数值位按位取反。 负数原码和补码的相互转换：符号位不变，数值位按位取反,末位再加1。2.物理地址、逻辑地址的概念及转换计算 P23 逻辑地址：“段地址：偏移地址”的形式表示的地址 物理地址：将逻辑地址中的段地址左移二进制4位，加上偏移地址20位所组成的地址 转换：段地址×16+偏移地址=物理地址（可以理解为段地址末尾补一个零）3.段地址、偏移地址的寄存器表示及计算 P23-24 代码段 - CS：IP 堆栈段 - SS：SP 数据段 - 存放当前运行程序所用的数据。DS存放数据段的段地址，存储器中的操作数的偏移地址则由各种主存寻址方式得到，称之为有效地址EA 附加段 - 是附加的数据段，也用于数据的保存。 使用BP基址指针寄存器访问主存，则默认是SS段，同时也允许段超越。4.汇编语言语句的格式 P25 P54-56 执行性语句 格式 - 标号: 处理器指令助记符 操作数, 操作数 ;注释 说明性语句 格式 - 名字 伪指令助记符 参数,参数,······ ；注释 标号与名字：是用户自定义的符合汇编程序语法的标识符 标识符 最多由31个字母、数字及规定的特殊符号（_、$、?、@）组成 不能以字母开头 不能是汇编程序采用的保留字 助记符：是帮助记忆的符号，反映指令的功能 操作数和参数 处理器指令的操作数可以是一个具体的常量，也可以是保存在寄存器中的数据，还可以是一个保存在存储器中的变量。 伪指令的参数可以是常量、变量名、表达式等，可以有多个，参数之间用逗号隔开。5.指令的寻址方式的类型及特点 P24-29 立即数寻址：用常量表达具体的数值 寄存器寻址：用寄存器名表示其中的内容 操作数可放在：AH/AL/BH/BL/CH/CL/DH/DL/AX/BX/CX/DX/SI/DI/BP/SP 还可以放在段寄存器中：CS/DS/SS/ES 存储器寻址：用存储器地址代表保存的数据 直接寻址 其默认段地址在DS段存储器中，可以使用段超越前缀来改变例：MOV AX，[2000H] 寄存器间接寻址 在8088/8086中寄存器可以是BX/BP/SI/DI例：MOV AX，BX 寄存器相对寻址 寄存器可以是BX/SI/DI，默认是数据段DS 也可以是BP，默认是堆栈段SS 都可用段超越前缀改变 例：MOV AX，[SI + 06H] 基址变址寻址 BX或BP + SI或DI = EA（有效地址） 例：MOV AX，[BX + SI] 或 MOV AX，[BX] [SI] 都可用段超越前缀改变 相对基址变址寻址 BX或BP + SI或DI + 位移量 = EA（有效地址） 例：MOV AX，[BX + DI - 06H] 都可用段超越前缀改变6.汇编指令的功能、格式及医用，包括对标志位的影响情况 P29-45 P47 数据传送类指令 通用数据传送指令 - 传送指令MOV 功能：把一个字节或字的操作数从源地址传送至目的地址 格式：见P29 不影响任何标志位 目的操作数和源操作数必须类型一致，否则为非法指令 堆栈操作指令 - PUSH、POP 功能：堆栈是一个“先进后出”的主存区域，使用SS段寄存器记录段地址；堆栈只有一个出口，即当前栈顶，用堆栈指针寄存器SP指定栈顶的偏移地址。 入栈指令PUSH会使堆栈指针SP减2，出站指令POP会使堆栈指针SP加2。 格式：见P31 不影响任何标志位 标志操作指令 可以直接读写标志寄存器的内容以及可以直接改变CF、DF、IF标志的状态的指令 地址传送指令 - LEA 功能：将存储器操作数的有效地址（段内偏移地址）传送至16位通用寄存器中 格式：见P33 不影响任何标志位 算术运算类指令 加法和减法指令 - 加法指令ADD、ADC、INC，减法指令SUB、SBB、DEC、NEG和CMP 功能：它们分别执行字或字节的加法和减法运算 格式：见P33 除INC和DEC不影响CF标志外，其他按定义影响全部状态标志位 符号扩展指令 CBW ;字节转换为字：AL符号扩展成AX CWD ;字转换为双字：AX符号扩展成DX 乘法和除法指令 乘法指令 MUL ;无符号数 IMUL ;有符号数 除法指令 DIV ;无符号数 IDIV ;有符号数 位操作类指令 逻辑运算指令 - AND、OR、XOR、TEST、NOT 功能、格式：见P37 AND(与)/OR(或)/XOR(异或)/TEST(测试)会使CF、OF都清零，其他标志位按定义影响。NOT(非)不影响任何标志位。 串操作类指令 控制转移类指令 条件转移指令 JZ/JNZ：利用零标志ZF，分别判断结果是0（相等）还是非0（不等） JS/JNS：利用符号标志SF，分别判断结果是负还是正 JO/JNO：利用溢出标志OF，分别判断结果是溢出还是没有溢出 JC/JNC：利用进位标志CF，判断结果是有进位（1）还是无进位（0） 循环指令 LOOP ;CX←CX-1 ;若CX≠0，转移 循环次数必须放在CX中 JNZ ;不为0转移 JCXZ ;为0循环：CX=0，转移 中断指令 21号中断 INT 21H ;屏幕显示 处理器控制类指令7.汇编伪指令的类型、格式及应用 P61 DB：字节（Byte）类型，分配一个或多个字节单元 DW：字（Word）类型，分配一个或多个字单元，每个数据是字量、16位数据 DD：双字（Dword）类型，分配一个或多个双字单元，每个数据是双字量、32位数据8.汇编语言编程的上机过程 用编辑器编辑代码后保存为汇编源文件（.asm）→经过编译得到目标文件（.obj）→经过连接生成可执行文件（.exe）9.汇编语言程序段的阅读、源程序的编写 P61-74CHAPTER 4-51.总线类型及特点 P94-95 特点：总线是功能部件之间实现互连的一组公共信号线，用作相互间信息交换的公共通道。 总线类型 按信息传递方向分 单向总线 输入总线或输出总线 双向总线 按数据传输方式分 并行总线 串行总线 按传输的信息种类 数据总线 地址总线 控制总线 扩展总线 局部总线2.8086/8088引脚功能和类型 P98-108 AD7AD0、A15A8、A19/S6~A16/S3 地址/数据总线：传输地址信号，一般数据都是双向传输，在主从模块间传送、交换数据信息。 读写控制：控制存储器或I/O端口进行数据传输 ALE - 高电平有效 IO/-M - 高低均有效，高电平表示CPU访问I/O接口，低电平表示CPU访问存储器 -WR - 低电平有效，写控制 -RD - 低电平有效，读控制 HOLD/HLDA 总线请求/响应：均为高电平有效 RESET 复位：高电平有效，8088复位后，CS = FFFFH，IP = 0000H，复位后第一条执行的指令物理地址从FFFF0H处开始。3.8086/8088功能结构和存储器结构 P136-137 偶存储体：对应所有偶地址单元，接微处理器的低8位D7~D0 奇存储体：对应所有奇地址单元，接微处理器的高8位D15~D84.8086/8088工作模式的配置结构：3：8地址译码器、地址锁存器类型和应用 P99-107 8086/8088可以在两种工作模式下工作，即最小模式和最大模式 最小模式－－即系统中只有8086（或8088）一个微处理器。最小模式是单处理器系统。系统中所需要的控制信号全部由8086（或8088）CPU本身直接提供 最大模式－－系统中有两个或两个以上的微处理器，即除了主处理器8086（或8088）以外，还有协处理器（8087算术协处理器或8089 输入/输出协处理器）。最大模式可构成多处理器系统，系统中所需要的控制信号由总线控制器8288提供 可根据图计算3:8译码器地址范围5.8086/8088系统总线的类型 P107-1116.存储器的类型、特点及典型芯片 P113-129 随机存储器（RAM） 静态RAM（SRAM） 6116 动态RAM（DRAM） 4164 只读存储器（ROM） 可擦除可编程ROM（EPROM） 2716/2732/2764 2K8/4K8/8K*8 电擦除可编程ROM（EEPROM） 2816 闪速存储器 29C5127.8086存储器的分体结构、与CPU的连接方式 P131-1388.存储器的组织：芯片地址线、数据线和片数、组数计算 P131-135 要求在给出容量的情况下，可求出存储芯片的地址线、数据线；并可计算已知总容量和单片容量的情况下的片数9.中断类型及特点 P159-160 内部中断 除法错中断 指令中断 单步中断 外部中断 非屏蔽中断 屏蔽中断10.中断相关概念及计算 P161-165 中断向量：是指早期的微机系统中将由硬件产生的中断标识码（中断源的识别标志，可用来形成相应的中断服务程序的入口地址或存放中断服务程序的首地址） 中断向量表：是一种表数据结构，是中断向量号与其对应的中断服务程序入口之间的链接表。 中断向量号（中断类型）：指当出现需要时，CPU暂时停止当前程序的执行转而执行处理新情况的程序和执行过程。 以上三者关系:中断向量=[中断号 * 4], 其中方括号的含义是内存单元的内容.(即中断向量表刚好存放在内存绝对地址0开始的位置)11.中断过程 P152-154 中断请求 中断判优 中断响应 中断处理 中断返回Chapter 6-121.I/O接口、端口的概念、编址方法 P140-143 I/O接口：是主机与被控对象进行信息交换的纽带，一个接口芯片会有一个或多个端口 I/O端口：简单理解为输入输出端口（IN、OUT） 编址方法 I/O端口与存储器地址独立编址 I/O端口与存储器地址统一编址 I/O地址译码2.4种数据传送方式的类型、特点及比较 P146 见附表1 3.无条件传送、查询传送的原理、结构和程序段 P146-152 见附表2-1、2-2、2-3 4.8259功能、结构、引脚 P164-166 功能：管理Intel 8080/8085和Intel 8086/8088微处理器的可屏蔽中断 一片8259A可以管理8级中断，可扩展至64级 每一级中断都可单独被屏蔽或允许 在中断响应周期，可提供相应的中断向量信号 有多种工作方式，可以通过编程来选择 结构及引脚 中断控制 - 3个8位可读写寄存器 IRR（中断请求寄存器）：1表示有中断请求，0表示无请求 ISR（中断服务寄存器）：1表示正在服务，0表示没有被服务 IMR（中断屏蔽寄存器）：1表示被屏蔽，0表示允许该中断 与处理器接口 中断级联5.8253功能、结构、引脚、工作方式、初值计算、控制字、初始化编程 P182-190 功能 具有三个独立的16位减法计数器 每个计数器可按二进制或十进制计数 每个计数器的计数速率可达2MHZ 每个计数器有六种工作方式 全部输入输出都与TTL电平兼容 结构与引脚 数据总线缓冲器 8位双向3态缓冲器，CPU与8253数据联络通道 读写控制电路 CS—片选信号RD—读8253 WR—写入8253 A0、A1—计数通道地址选择 控制字寄存器 8位寄存器，在8253初始化时，由CPU写入控制字，以决定计数通道的工作方式 计数器通道 计数器0、计数器1、计数器2独立16位减法计数器，计数值可写入或读出 引线 CLK—时钟脉冲输入线 GATE—门控信号输入，为低时禁止计数器计数 OUT—计数/定时输出，当计数到0时输出信号 A0、A1—通道地址选择00—计数器0；01—计数器1；10—计数器2；11—控制字寄存器 工作方式 方式0：计数结束中断 方式1：可编程单稳脉冲 方式2：频率发生器（分频器） 方式3：方波发生器 方式4：软件触发选通信号 方式5：硬件触发选通信号 初值计算 见课本P187 控制字 控制字的作用是决定8253各计数器工作方式；控制字寄存器实际上是3个，分别控制三个计数器，但它们的端口地址相同。 D7、D6：计数器选择 00 - 计数器0 01 - 计数器1 10 - 计数器2 11 - 非法 D5、D4：读写格式 00 - 计数器锁存 01 - 只读写计数器的低8位，高8位自动为0 10 - 只读写计数器高8位，低8位自动为0 11 - 先读写计数器低8位，再读写高8位 D3D2D1：计数器工作方式 000 - 方式0 001 - 方式1 ×10 - 方式2 ×11 - 方式3 100 - 方式4 101 - 方式5 D0：计数数制，决定计数器按二进制计数或BCD码（十进制）计数。 0 - 二进制 1 - BCD码（十进制） 初始化编程 见课本P188-1906.8237功能 有4个独立DMA通道，每个通道均可独立传送数据 每个通道DMA请求都可分别允许和禁止 每个通道均有64KB寻址和计数能力（16位地址寻址能力） 有4种DMA传送方式，分别为单字节传送、数据块传送、请求传送和级联传送方式 需要更多数据传送通道可把8237A级联 7.8255功能、结构、引脚、工作方式、控制字及连接打印机的应用 P210-221 功能 一个并行输入、输出的LSI芯片，多功能的I/O器件，可作为CPU总线与外围的接口 具有24个可编程设置的I/O口，即3组8位的I/O口为PA口，PB口和PC口 结构与引脚 RESET：复位输入线，当该输入端处于高电平时，所有内部寄存器（包括控制寄存器）均被清除，所有I/O口均被置成输入方式 CS：芯片选择信号线，当这个输入引脚为低电平时，即/CS=0时，表示芯片被选中，允许8255与CPU进行通讯;/CS=1时，8255无法与CPU做数据传输 RD：读信号线，当这个输入引脚为低跳变沿时，即/RD产生一个低脉冲且/CS=0时，允许8255通过数据总线向CPU发送数据或状态信息，即CPU从8255读取信息或数据 WR：写入信号，当这个输入引脚为低跳变沿时，即/WR产生一个低脉冲且/CS=0时，允许CPU将数据或控制字写入8255 D0～D7：三态双向数据总线，8255与CPU数据传送的通道，当CPU 执行输入输出指令时，通过它实现8位数据的读/写操作，控制字和状态信息也通过数据总线传送 工作方式 方式0：基本输入输出方式 方式1：选通输入输出方式 方式2：双向选通输入输出方式 控制字 方式控制字，详见附表3-1 端口C置位/复位控制字，详见附表3-2 连接打印机应用 见附表3-301、3-302、3-401、3-402 8.8251/8250功能、串行通信的波特率及波特因子 P241-256 功能 实现了起止式串行异步通信协议，支持全双工通信 通信字符可选字数据位为5~8位，停止位1、1.5或2位 可进行奇偶校验，具有奇偶、帧、溢出错误的检测电路 波特率 在串行通信中，用 “ 波特率” 来描述数据的传输速率。所谓波特率，即每秒钟传送的二进制位数，其单位为 bps ( bits per second )。它是衡量串行数据速度快慢的重要指标 波特因子 波特因子就是发送／接收 1 个数据( 1 个数据位)所需要的时钟脉冲个数，其单位是个／位 例:波特率 =9600bps ，波特率因子 =32 ，则 接收时钟和发送时钟频率 =9600 × 32=297200Hz 9.模拟接口的DAC/ADC芯片 P258-271 其他整理芯片名称与型号整理见附表4 相关下载思维导图下载http://t.cn/AiN1H6TF 附表图片下载http://t.cn/AiN1HPGk 最后，深深地感谢这一年为我们专业课辛勤付出的张春芳老师！ Mind Mapping by XMind: ZEN Pictures Designed by PowerPoint 2019 2019/06/19 21:59 最近一次更新： 2019/06/24 10:34","categories":[{"name":"知识整理","slug":"知识整理","permalink":"https://blog.amoswu.cn/categories/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Study","slug":"Study","permalink":"https://blog.amoswu.cn/tags/Study/"},{"name":"HBTU","slug":"HBTU","permalink":"https://blog.amoswu.cn/tags/HBTU/"},{"name":"汇编","slug":"汇编","permalink":"https://blog.amoswu.cn/tags/%E6%B1%87%E7%BC%96/"},{"name":"微机原理","slug":"微机原理","permalink":"https://blog.amoswu.cn/tags/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"}]},{"title":"2019届毕业典礼发言稿","slug":"2019届毕业典礼发言稿","date":"2019-06-13T16:00:00.000Z","updated":"2021-01-02T16:37:46.002Z","comments":true,"path":"2019/06/14/2019届毕业典礼发言稿/","link":"","permalink":"https://blog.amoswu.cn/2019/06/14/2019%E5%B1%8A%E6%AF%95%E4%B8%9A%E5%85%B8%E7%A4%BC%E5%8F%91%E8%A8%80%E7%A8%BF/","excerpt":"","text":"今天是工学部2015级学长学姐毕业的日子，很荣幸能够作为在校生代表在他们的毕业典礼上发言，以下是发言稿全文。 尊敬的各位领导、老师，亲爱的学长学姐们： 大家好！&ensp;&ensp;我是来自工学部2016级计算机科学与技术专业的吴宗震。很荣幸能够作为在校生代表在这里发言。时维六月，栀子花香。在这个满载收获，充满喜悦的毕业季，请允许我代表全体在校生对即将毕业的学长学姐们道一声最诚挚的祝贺，祝贺你们圆满完成学业，开启崭新的征程。 &ensp;&ensp;相逢又别离，归帆又离岸。母校的每一个角落都珍藏着你们的友情，母校的每一方土地，都弥漫着你们的梦想。教室里，图书馆中，实验室内，总会看到你们伏案学习的场景。我们从你们身上学到的，不仅仅是“严谨”，“博学”，还有对所学领域的热爱、坚定和责任。你们在人生最宝贵的四年，用自己的实际行动为我们做出了最好的榜样！&ensp;&ensp;回想三年前，我们刚踏入汇华时，你们在学习上悉心指导我们走出迷茫，在生活中关怀我们、帮助我们的场景，都化成了如今我们不断开拓进取、勇往直前的源动力。请学长学姐们放心，我们一定会像你们一样认真笃定、勤劳努力，成为一名肯吃苦、有担当、有作为的工学人！&ensp;&ensp;学长学姐们，未来充满未知，也充满期待，光明与黑夜交错，鲜花与荆棘同在。正如习近平总书记所说，心中有阳光，脚下有力量，为了理想能坚持、不懈怠，才能创造无愧于时代的人生。在这里，请带上我们的祝福，带上四年青春的美好回忆，扬帆起航！祝工学部2019届所有学长学姐不断超越自我，开创更美好的未来！&ensp;&ensp;我的发言完毕，谢谢大家！","categories":[{"name":"稿件","slug":"稿件","permalink":"https://blog.amoswu.cn/categories/%E7%A8%BF%E4%BB%B6/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"毕业季","slug":"毕业季","permalink":"https://blog.amoswu.cn/tags/%E6%AF%95%E4%B8%9A%E5%AD%A3/"},{"name":"发言稿","slug":"发言稿","permalink":"https://blog.amoswu.cn/tags/%E5%8F%91%E8%A8%80%E7%A8%BF/"}]},{"title":"汇编上机代码整理","slug":"汇编上机代码整理","date":"2019-06-04T16:00:00.000Z","updated":"2021-01-02T16:40:04.752Z","comments":true,"path":"2019/06/05/汇编上机代码整理/","link":"","permalink":"https://blog.amoswu.cn/2019/06/05/%E6%B1%87%E7%BC%96%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86/","excerpt":"","text":"教材版本说明 Textbook version Title： 16/32位微机原理、汇编语言及接口技术教程 修订版 Author： 钱晓捷 Instructor： 张春芳 河北师范大学 代码部分01.屏幕打印‘Hello，how are you’123456789101112131415161718; hello，how are youDATA SEGMENT STRING DB &#39;hello.how are you!&#39;,&#39;$&#39; ORG 100HDATA ENDSCODE SEGMENT ASSUME CS:CODE,DS:DATABEGIN: MOV AX,DATA MOV DS,AX LEA DX,STRING MOV AH,09H INT 21H MOV AH,4CH INT 21HCODE ENDS END BEGIN 02.屏幕打印 1+2+3 的结果123456789101112131415161718; 1 + 2 + 3 &#x3D; 6CODE SEGMENT ASSUME CS:CODEBEGIN: MOV AL,01H MOV BL,02H ADD AL,BL INC BL ADD AL,BL ADD AL,30H MOV DL,AL MOV AH,02H INT 21H MOV AH,4CH INT 21HCODE ENDS END BEGIN 03.编程实现1+2+3+…+1001234567891011121314151617181920212223;1到100的和DATA SEGMENT SUM DW ?DATA ENDSCODE SEGMENT ASSUME CS:CODE,DS:DATABEGIN: MOV AX,DATA MOV DS,AX MOV AX,0 MOV BX,1 MOV CX,100SLOOP: ADD AX,BX ADD BX,1 LOOP SLOOP MOV SUM,AX MOV DX,AX MOV AH,4CH INT 21HCODE ENDS END BEGIN 04.100以内的偶数（奇数）求和1234567891011121314151617181920212223;方法一：循环50次求和DATA SEGMENT SUM DW ?DATA ENDSCODE SEGMENT ASSUME CS:CODE,DS:DATABEGIN: MOV AX,DATA MOV DS,AX MOV AX,0 ; 这里是 0 为偶数求和，是 1 为奇数求和 MOV BX,2 MOV CX,50 ;计数器 CXSLOOP: ADD AX,BX ADD BX,2 LOOP SLOOP ; LOOP 会自动寻找计数器 CX MOV SUM,AX MOV DX,AX MOV AH,4CH INT 21HCODE ENDS END BEGIN 05.100以内的偶数（奇数）求和1234567891011121314151617181920212223;方法二：条件判断求和DATA SEGMENT SUM DW ?DATA ENDSCODE SEGMENT ASSUME CS:CODE,DS:DATASTART: MOV AX,DATA MOV DS,AX MOV AX,0 ; 这里是 0 为偶数求和，是 1 为奇数求和 MOV BX,2AGAIN: ADD AX,BX ADD BX,2 CMP BX,100 JBE AGAIN MOV DX,AX MOV SUM,AX MOV AH,4CH INT 21HCODE ENDS END START 06.求数组最大（小）值源代码123456789101112131415161718192021222324252627;求数组最大值DATA SEGMENT MAXAY DW ? ARRAY DW 2,6,-3,10,-5,2,12,13,16,-8DATA ENDSCODE SEGMENT ASSUME CS:CODE,DS:DATABEGIN: MOV AX,DATA MOV DS,AX LEA SI,ARRAY MOV CX,10 MOV AX,[SI]MAXCK: ADD SI,2 CMP AX,[SI] JGE NEXT ;最大值用 JGE ，最小值用 JLE MOV AX,[SI]NEXT: LOOP MAXCK MOV MAXAY,AX MOV DX,AX MOV AH,4CH INT 21HCODE ENDS END BEGIN 程序流程图 07.小大写字母转换1234567891011121314151617181920;小大写字母转换 P91 3.16CODE SEGMENT ASSUME CS:CODEBEGIN: MOV AH,01H INT 21H ;从键盘读入 CMP AL,&#39;a&#39; JB STOP ;与a比较 CMP AL,&#39;z&#39; JA STOP ;与z比较 SUB AL,20H ;转换成大写 MOV DL,AL MOV AH,02H INT 21HSTOP: MOV AH,4CH INT 21HCODE ENDS END BEGIN 对代码有疑问？请点击 https://wj.qq.com/**填写问题汇总问卷，老师将在下周统一解答。 Organized by Amos © 2019 2019/06/05 18:20","categories":[{"name":"知识整理","slug":"知识整理","permalink":"https://blog.amoswu.cn/categories/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"},{"name":"笔记","slug":"知识整理/笔记","permalink":"https://blog.amoswu.cn/categories/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Study","slug":"Study","permalink":"https://blog.amoswu.cn/tags/Study/"},{"name":"HBTU","slug":"HBTU","permalink":"https://blog.amoswu.cn/tags/HBTU/"},{"name":"汇编","slug":"汇编","permalink":"https://blog.amoswu.cn/tags/%E6%B1%87%E7%BC%96/"},{"name":"微机原理","slug":"微机原理","permalink":"https://blog.amoswu.cn/tags/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"}]},{"title":"我和团总支一起走过的这三年","slug":"我和团总支一起走过的这三年","date":"2019-05-29T16:00:00.000Z","updated":"2021-01-02T16:41:19.775Z","comments":true,"path":"2019/05/30/我和团总支一起走过的这三年/","link":"","permalink":"https://blog.amoswu.cn/2019/05/30/%E6%88%91%E5%92%8C%E5%9B%A2%E6%80%BB%E6%94%AF%E4%B8%80%E8%B5%B7%E8%B5%B0%E8%BF%87%E7%9A%84%E8%BF%99%E4%B8%89%E5%B9%B4/","excerpt":"","text":"谨以此文献给陪我走过三年大学青春的——工学团总支。 文中的表述多是口语化表达，可以说是现场演讲的文字版，如有错误还请指正。 如果时光倒流，我的选择还是它。 老牌企业家冯仑曾经说过，一个领导者要做好三件事：指道、扛事、牺牲。这三个词恰如其分的把我在团总支这三年的经历进行了总结。当然，会有略微的差异，请听我慢慢给你说。 前言在开始说之前，我有一个小小的希望：今天，我们不提荣誉，不流眼泪。一年青春不易，愿你，学会感恩，懂得知足，变得善良。虽然今天大会的名字叫“换届大会”，换届并不意味着离开，而是换一种方式陪伴。 目录我将从以下三个部分讲述我的这三年，对于每个部分，我都总结了两个词和一个短句，相信你听我讲完会理解这其中的含义。这三部分分别是：“再见·信工”从加入团总支谈起、“你好·工学”留下来收获了什么、“未来·可期”聊一聊第十届。 1.“再见·信工”从加入团总支谈起 在开始讲之前，我想先把之前大家的疑问再重述一遍， 第一个，你是怎么样加入团总支的？ 第二个，你为什么会这样选择？ 好了，带着这两个问题让咱们一起开始这个故事。故事的开始时间被拉到了2016年8月30日，这一天，我正式成为了一名大学生，一个汇华学院的在校生。由于我的家在山东，路途相对遥远，所以我提前两天就来到了学校准备报到。我和去年的时候很多同学一样，对新的大学满怀期待。报到结束后，我就留下来帮助我们的导助迎接我的新同学们了。 报到工作结束后，我们经历了班会、新生入学教育等等一系列的讲座之后，在开学的第二天就迎来了——军训，这次军训为期十天，酸爽就不说了。。。。 军训开始的第三天晚自习，我们被集中到了一教的某一个大教室里，聆听了学部四大组织的纳新宣讲。当然，比这个时间更早一天的是院级组织的纳新，已经进行地如火如荼。我呢，也不甘示弱，总想多加几个组织玩一玩，于是就像小白鼠一般地报了院青协的某一个部门。 经过一个中秋节假期，各个组织都已经纳到了“合适”的新人，这里的合适是加引号的，因为他们也都像押宝一样，把自己接下来一年的辛苦与否押在了我们这样一群“初生牛犊不怕虎”的人身上。 而我，就成为了现在我自己经常说的“不靠谱的人”。在我收到了院青协某部的初试通过短信之后，我又收到了那个学长的QQ消息，他告诉我所有人都会再收到一个复试短信，让我忽略这条短信。因为，我已经被录用了。在我收到这个QQ消息的那一刻，我脑子里一堆问号？？？？？这都是什么情况？？？？？直接就录用了为啥还要发短信？？？？？后来，我就索性没去开第一次例会，自然也就不是院青协的一员了。我当时觉得这个纳新太没有挑战性了，说录用就录用了，，一点也不好玩。。。 就这样，我就出了在班里任职班长之外，没有了任何的组织和社团。 老天怎么可能放过我呢？十一假期回来之后，我作为班长收到了一个当时觉得非常大的一个活动，当然也是非常懵的一个活动——团日活动。在经过班委成员的一致努力下，我们制定了这个活动的方案。而恰恰是这个方案的某一个活动，就让我踏进了团总支。这个活动是我们班的一个文娱晚会，虽然晚会地点是我们班教室，舞台是讲台，但是我们还是很精心地组织了各个宿舍排练节目，最终确定了节目单。既然是晚会，肯定是有特定的观众的，于是我们就想到了邀请学长学姐，又由于这个活动是团总支主办，所以我们就邀请了团总支的学长学姐。然而当时我都不知道团总支这个组织到底是啥样子。。。。。就这样我们成功邀请到了好几位（具体几位记不清了）学长学姐来观看我们的晚会，就这样晚会正常进行完之后，要书写团日活动相关的评比材料了。我当时一无所知，所以向我们的导助求助，我们导助当时就把组织部部长，也就是后来被我们折磨一年的康军伟学姐的QQ给我了，我加上之后就一通问。 在问的过程中，军伟学姐无意间就问了我一句，你现在有组织吗？我当时想都没想，就回了句，没有啊，姐。谁曾想，她却认真了，反复想我求证我到底有没有组织，最后甚至让我们导助来问我有没有组织。我确实是没有，从头至尾都说的没有。 更意想不到的是，她过了几天问我对团总支组织部有没有兴趣？我当时的脑子又是一堆问号？？？？？？稀里糊涂的就回答了个，还可以，之前没详细了解过。。。。。她又问我想不想了解了解，想的话可以来组织部工作。我当时就说，不是纳新已经结束了吗，应该不能破格录用的吧，其实我心里只是客气客气并没有真想留。谁知道，过了一会儿她还真回了一句，该破格的时候就得破格。。。。 再后来，我就成为组织部的一员了。直到我接到第一个任务，发送评委的邀请短信。 第一年的感受一年的时间真的很快，不知不觉我们部六个男生，一个女生和我们一个很强的部长就把一年的工作都做完了。这里我想简单谈一谈这一年的感受，就从PPT展示的这六个问题来说吧。 要不要加组织？事实证明，很有必要！因为经过这一年你会认识到，不是你认识了更多的人，而是更多的人认识了你。 有没有听说过两种加学生组织的驳论？第一种是学生组织一无所获，第二种是学生组织乱七八糟。举个简单的例子来说吧，你喜欢一个东西可能只有一两个理由，而你不喜欢或者想逃避一个东西会有千万条理由，这就好比你不想参加咱们的活动，不想参加咱们的聚餐或者不想开会找理由一样。 什么叫干事？这是所有在组织或者社团里的大一新生的共同称号“干事”，说白了就是什么事都干，搬桌子你得干，抬椅子你的干，算分你得干，吹气球你得干，检查表格你得干，唱歌跳舞你得干，拉赞助你得干，写策划你得干，写新闻你得干，挨骂你也得干，所以就是什么都要干。 除了上面这些呢？除了这些，我还想说一点切身体会，大多说学长学姐，不限于你的部长们都很乐意帮助你，当然，前提是你主动寻求帮助。这就像买冰淇淋一样，别人不一定知道你喜欢的口味。 这就没了？当然还有，做事的前提是先做人，做人的前提是“把话讲好”。有句话叫用一周学说话，一生学闭嘴，该有礼貌的时候就应该有礼貌，该谦让的就要谦让。 用一句话总结呢？选择，是大学生涯面临最多的一个问题。每一次选择都会影响你的大学生活，希望你慎重选择。 再见，信息工程学部这张图片，拍摄于2017年7月6日，它和我们这一年的付出一样，被时间淹没在了每个人的脑海里，从此“信工”就化成了一种符号，伴随着我们的青春。这就像电影《老师·好》开头的那句台词：我坚信，青春不会消亡，它只是躲在某片绿荫下，慢慢疗伤。 2.“你好·工学”留下来收获了什么 两年前的这个月，一份留部申请、一封自荐信，将我与第九届工学团总支联系到了一起。几次谈话，几日的等待，从老部长手中接过接力棒，我和我的搭档靳博文继续向前探索着即将到来的未知。 那年暑假······我们进行了为期十天的暑期社会实践，这个过程充满了美好，通过这几张图片感受一下我们当时的成长和经历吧。 第一张，当时我们的调研主题和“共享经济”有关，那小黄车就是一个绕不过去的话题，于是我们就和晓超老师一同探访了小黄车生产厂家——邢台天富车辆公司，图中就是我们当时在小黄车生产车间参观的场景。 第二张和第五张，时间没过几日庄里迎来了一场大范围暴风雨，把当时一教旁边很粗的树连根拔起了。。。。于是，我们就走出了没有空调的宿舍，去汉堡王斗地主去了。 第三张是我们在调研石家庄各个高校共享经济时骑共享单车出发的场景。 第四张是我们成功到达河北师范大学调研完毕拍的一张合影。 倒数第二张，是我在这期间，利用某一个下午和当时的书记助理刘涛学长参加的一个百度贴吧的吧主沙龙。 最后一周，邢台的同学肯定很熟悉，在邢台站站前广场拍摄的一张合影。 那个暑假有很多说不完的故事，它在我们心中种下了一颗种子，发芽后变成了一面旗帜。 部长真的“部长”？这番话我想对留下来的同学仔细讲一讲，无奈，时间有限。还好，在上周我也都给各位说过了。下面我就简单站在我当部长时的角度阐述四个点，第一个，看图片，这是我电脑的一个文件夹截图，在我的电脑里一直有个叫“团总支”的文件夹，里面收藏了这三年团总支关于我以及关于我们的点点滴滴。当然截图中的文件夹换完届组织部的同学可能会看到，期待你们有更多的创新。第二个，当部长涨知识，不仅可以了解更多关于高校学生组织的知识，还可以学到更多关于学生组织工作的知识。第三个，当部长长经验，可以积累到和干事阶段不一样的经验，如：如何与院级组织沟通、如何应对工作中的突发状况等等。第四个也是最重要的一个，当部长长能力提高最大的就是——组织能力。因为你要不断沟通以及组织好每一位部内成员，更要组织好每一位团干部。 创新，改变现状的源动力我和我的搭档在担任第九届工学团总支组织部负责人期间，进行了两个创新，如图所示。第一个，诚信应考承诺书，从源头解决了团考过程中参加团考的人员态度不端正的问题。第二个，网络竞赛操作步骤手册，大大提高了参赛统计的正确率，也拉进了与别的学部团总支成员的关系。 又到换届这个截图是我和我的搭档在换届时，利用了四个夜晚，耗费了15个小时制作而成的工作交接报告。从这个制作过程中，有一句话可以描述当时的心情，那就是“该来的都在路上，过去的都会过去”。 3.“未来·可期”聊一聊第十届 看数据这一年，第十届工学团总支由105人组成，其中部长18人，干事84人。这一年，我们一起举办了10个活动，其中常规活动8个，新增活动2个。 这冰冷的数字并不能说明什么，接下来我们一起看看图。 看图片这是所有部门以及部长们和我们的合影，我放上了一句想说的话“曾经，最怕的是’收到请回复‘”，离开后才知道，那是最快乐的日子“。 你想表达什么？说了这么多，你们肯定都想知道，我要表达的是什么？ 这两张图片，是我近期偷偷用电脑QQ导出的“第十届团总支负责人”QQ群的聊天记录TXT版，可以看到，占用了2.1M的空间。还可以看到，这个群是2018年6月15日创建的，也就是那一天，第十届团总支交到了我们三个人的手里。 这小小的空间能说明什么？在做的各位都是理科生，大家一起跟我算一个数，2.1MB≈2150KB，1KB根据国标大约是512汉字，2150*80%=1720KB≈88w个汉字，乘以80%的原因是，这个里面还有用户昵称啊，时间戳啊这样的无关信息，当然这学期开始也有很多是在微信群里聊的，就忽略不计了。这一切加起来，大概是各位正在焦头烂额的高数课本的2.1倍。什么概念呢？你们的部长们为了工作聊出了2.1本同济版高等数学下册。是的，我想说的是，这一年最不容易的是她们，她们可能在你们的面前比较高冷、比较凶狠，但她们也是第一次当部长，还请大家多多包涵。 感谢这一年，让我们共同成长。这一年，我们一起完成了一次逆熵增的自我渡劫。不管你当时是以何种理由选择了团总支，此刻，请为自己过去辛勤付出的一年鼓掌！ 学长，下周四还要开例会吗？去年刚开学那会儿，这个截图上了热搜，关于这件事，我想在这里给所有人说三句话，第一句，副书记、部长以及干事，只有承担责任大小的不同，工作范围的不同，而没有所谓身份上的差异。第二句，学长学姐要有学长学姐的模样，要让别人真正从内心里尊敬你，从业务上佩服你，从格局上仰慕你。第三句，因为喜欢一个组织而来到这里，因为不喜欢组织里的一些人而离开，是一个组织最大的遗憾。 用一个字或一个词概括这一年前两天换届的问卷大家都填过了，经过数据分析，我发现了这个现象，大多数的部长们和干事们都写下了“充实”二字，干事们呢排在第二多的是“收获”二字。这又意味着什么呢？这意味着，我们三个这一年的工作得到了多数人的支持，我代表我们仨谢谢大家！由于时间和篇幅的原因，我不能将你们的祝福一一放在这个小小的PPT里，但是很多的话已经记在了我们三个心里。 我的关键词这三年对于我们三个来说，有很多的关键词，在这里我把它总结成了两个版本，中文和英文版，我只读中文版吧，步步惊心、步步经心、步步精心，英文版大家对照看一下。 彩蛋下面是一个彩蛋，大家都比较喜欢微博，如果你不想和我聊天但又想继续了解我，请你扫描右侧二维码关注我的微博。左侧的二维码的是另一个彩蛋，今天演讲的文字版我已经提前写好放在了我的博客里，如果我讲的过快你没有听懂，欢迎扫码查看文字版。 最后，我想送给大家两句话，第一句送给即将离开团总支的同学们，“做一件有价值的事情，一直做，静静等待时间的回报”，这是得到APP创始人罗振宇在2018年跨年演讲时说过的一句话，在这里与你共勉。 最后一句，送给参加本次大会的所有人，这一年经历很多，团总支对于每个人来说都承载了至少一年的青春，希望你不论留下来或者离开，不要说团总支好或者不好，因为它只是三个字，不带有任何的感情色彩，你可以说某个人或某些人不好，但希望你不要说团总支这三个字不好，这算是我的一个小小寄托吧。当然，这对其他任何组织也是一样，任何组织都是没有感情色彩的，有感情的是组织里的人。以上，好的都珍藏，坏的都遗忘。 在本文的最后，我想借这个机会统一感谢过去的三年里一直辛勤付出的晓超老师、王峰老师，以及第八届团总支负责人樊旭彬学姐、刘鑫学长、康军伟学姐，第九届团总支负责人周笑凝学姐、刘涛学长，还有第十届我的同事支锦龙、夏凤彬。我的大学有你们陪伴，此番青春——无憾！ ps: BGM 叶圣涛 - 还有多少个十年。","categories":[{"name":"稿件","slug":"稿件","permalink":"https://blog.amoswu.cn/categories/%E7%A8%BF%E4%BB%B6/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"HBTU","slug":"HBTU","permalink":"https://blog.amoswu.cn/tags/HBTU/"},{"name":"工学","slug":"工学","permalink":"https://blog.amoswu.cn/tags/%E5%B7%A5%E5%AD%A6/"},{"name":"团总支","slug":"团总支","permalink":"https://blog.amoswu.cn/tags/%E5%9B%A2%E6%80%BB%E6%94%AF/"}]},{"title":"Windows装机相关问题之装机知识扫盲","slug":"Windows装机相关问题","date":"2019-04-26T16:00:00.000Z","updated":"2021-01-02T16:38:01.721Z","comments":true,"path":"2019/04/27/Windows装机相关问题/","link":"","permalink":"https://blog.amoswu.cn/2019/04/27/Windows%E8%A3%85%E6%9C%BA%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","excerpt":"","text":"众所周知，电脑系统崩溃，除了恢复出厂设置之外，就需要重装系统了。重装系统也称之为装机，装机之前就需要做好准备工作，准备工作之一就是先了解下面几个问题。 硬盘分区格式目前主流的电脑硬盘分区格式有两种，一种是GUID（GUID Partition Table，缩写：GPT），另一种是MBR（Main Boot Record）。 定义GUID： 定义1—— A GUID is an acronyom that stands for Globally Unique Identifier, they are also referred to as UUIDs or Universaly Unique Identifiers - there is no real difference between the two. Technically they are 128-bit unique reference numbers used in computing which are highly unlikely to repeat when generated despite there being no central GUID authority to ensure uniqueness. GUID是代表全球唯一标识符的首字母缩略词，它们也被称为UUID或Universaly唯一标识符 - 两者之间没有真正的区别。从技术上讲，它们是计算中使用的128位唯一引用号，尽管没有中央GUID权限来确保唯一性，但它们在生成时极不可能重复。 ——from http://guid.one/guid 定义2—— A universally unique identifier (UUID) is a 128-bit number used to identify information in computer systems. The term globally unique identifier (GUID) is also used, typically in software created by Microsoft. When generated according to the standard methods, UUIDs are for practical purposes unique, without depending for their uniqueness on a central registration authority or coordination between the parties generating them, unlike most other numbering schemes. While the probability that a UUID will be duplicated is not zero, it is close enough to zero to be negligible. 全局唯一标识符（英语：Globally Unique Identifier，缩写：GUID；发音为/ˈɡuːɪd/或/ˈɡwɪd/）是一种由算法生成的唯一标识，通常表示成32个16进制数字（0－9，A－F）组成的字符串，如：{21EC2020-3AEA-1069-A2DD-08002B30309D}，它实质上是一个128位长的二进制整数。GUID一词有时也专指微软对UUID标准的实现。GUID的主要目的是产生完全唯一的数字。在理想情况下，任何计算机和计算机集群都不会生成两个相同的GUID。GUID的总数也足够大，达到了2128（3.4×1038）个，所以随机生成两个相同GUID的可能性是非常小的，但并不为0。所以，用于生成GUID的算法通常都加入了非随机的参数（如时间），以保证这种重复的情况不会发生。 ——from Wikipedia MBR： A master boot record (MBR) is a special type of boot sector at the very beginning of partitioned computer mass storage devices like fixed disks or removable drives intended for use with IBM PC-compatible systems and beyond. The concept of MBRs was publicly introduced in 1983 with PC DOS 2.0. 主引导记录（MBR）是分区计算机大容量存储设备（如固定磁盘或可移动驱动器）的最开始的一种特殊类型的引导扇区，旨在与IBM PC兼容系统一起使用。 MBR的概念于1983年与PC DOS 2.0一起公开发布。 ——from Wikipedia 相关知识MBR MBR不仅是计算机开机后访问硬盘时所必须要读取的首个扇区，还是由分区程序产生的不依赖于任何操作系统的。只有这样才能够实现多系统的引导。 MBR型的硬盘最多只能识别4个主要分区，这是由主引导记录的结构决定的。 在MBR分区表中，一个分区的最大容量为2T 在MBR分区表中最多4个主分区或者3个主分区＋1个扩展分区，也就是说扩展分区只能有一个，然后可以再细分为多个逻辑分区。 GUID GUID是一个实体硬盘的分区结构，是EFI的一部分，用来替代BIOS中的主引导记录分区表。 GPT磁盘分区样式支持最大卷为18 EB（Exabytes）（1EB=1048576TB）并且每磁盘的分区数没有上限，但Windows最大仅支持128个GPT分区 BIOS的两种启动模式目前存在的两种BIOS启动模式分别是：Legacy、UEFI LegacyLegacy BIOS是指传统的 BIOS，用Legacy引导的系统运行流程通常是：开机→BIOS初始化→BIOS自检→引导操作系统→进入系统。而该启动模式对应的硬盘分区格式应该为MBR格式。 UEFI 统一可扩展固件接口（英语：Unified Extensible Firmware Interface，缩写UEFI）是一种个人计算机系统规格，用来定义操作系统与系统固件之间的软件界面，作为BIOS的替代方案。可扩展固件接口负责加电自检（POST）、联系操作系统以及提供连接操作系统与硬件的接口。 ——from Wikipedia 用UEFI引导的系统运行流程通常是：开始→UEFI初始化→引导操作系统→进入系统，则该启动模式对应的硬盘分区格式应该为GUID格式。通俗的说，UEFI是一种新的主板引导初始化的标注设置，具有启动速度快、安全性高和支持大容量硬盘而闻名。 通过对比不难发现，UEFI的启动速度要快于Legacy，原因是省去了BIOS自检。所以，在UEFI出现后，多数pc厂商都选择预装Windows 8 及以上版本的系统，除了Windows 8 及以上版本的系统开机优化要好之外，还因为它们都支持UEFI引导启动，这也是很多Windows 7 PC开机速度慢的一个原因。 小结说了这么多，到底要用哪种方案进行装机呢？在这里，我只说两点忠告。 1.BIOS是新平台 ——&gt; 必选UEFI，特殊要求装Windows7的话选Legacy。所谓新平台就是购买年份在2015年以后，处理器在 Intel 5代或同等处理能力及以上的机型。 2.BIOS是老平台 ——&gt; 想都不要想直接选Legacy，不解释。 另一个需要科普的是，在一般的Windows电脑中，必备的两个分区是ESP分区和MSR分区，不可删除！ 附ESP与MSR分区的相关知识： 一、esp即EFI系统分区1、全称EFI system partition，简写为ESP。msr分区本身没有做任何工作，是名副其实的保留分区。ESP虽然是一个FAT16或FAT32格式的物理分区，但是其分区标识是EF（十六进制）而非常规的OE或OC。因此，该分区在Windows操作系统下一般是不可见的。支持EFI模式的电脑需要从ESP启动系统，E Fl固件可从ESP加载EFI启动程序和应用程序。2、ESP是一个独立于操作系统之外的分区，操作系统被引导之后，就不再依赖它。这使得ESP非常适用来存储那些系统级的维护性的工具和数据，比如：引导管理程序、驱动程序、系统维护工具、系统备份等，甚至可以在ESP里安装一个特殊的操作系统。3、ESP也可以看做是一个安全的隐藏的分区，可以把引导管理程序、系统维护工具、系统恢复工具及镜像等放到ESP，可以自己打造“一键恢复系统”。而且，不仅可以自己进行DIY，还要更方便、更通用。二、msr分区是保留分区1、windows不会向msr分区建立文件系统或者写数据，而是为了调整分区结构而保留的分区。在Wi n8以上系统更新时，会检测msr分区。msr分区本质上就是写在分区表上面的“未分配空间”，目的是微软不想让别人乱动。2、msr分区的用途是防止将一块GPT磁盘接到老系统中，被当作未格式化的空硬盘而继续操作（例如重新格式化）导致数据丢失。GPT磁盘上有了这个分区，当把它接入XP等老系统中，会提示无法识别的磁盘，也无法进一步操作。 ——来自 百度知道 下面一起来看一下日常生活中比较常(Keng)见(Ren)的几个品牌的BIOS。 1.Dell （戴尔）给戴尔电脑重装系统最大的一个坑——BIOS设置。 Win10降到Win7必须打开Legacy，步骤如下： Step 1.关闭安全模式 —— Secure boot -&gt;Secure boot enable 勾选 Disabled Step 2.打开高级启动项 —— Advanced Boot Options 勾选 Enable Legacy Option Roms Step 3.更改启动引导顺序 —— Boot sequence 勾选 Legacy Step 4.保存退出——Apply -&gt; Exit 或 按下 F10 -&gt; Save and exit 2.Lenovo （联想）给联想电脑重装系统的一个小坑——通过还原键进入BIOS。 许多联想系列、ThinkPad系列的笔记本开机出现 Lenovo 图标时不会提示按下哪个键进入BIOS菜单，这是因为联想在主板上加了一个物理按键，这个按键其实是不嫩用手按下去的，因为它很小，就像下图中的一个例子所示，一般这种按键都在机身的一侧并且有可辨别的标识。 操作步骤： 拿一个尖锐的物体，比如卡针或者针，在电脑关机的状态下按住此键3-5s，电脑会自动启动。在屏幕出现 “Lenovo”的瞬间，按下 F2（或F12）不同机型的快捷键不同，详情可百度，或直接查看屏幕左下角或右下角提示。 本次的装机相关知识到此结束，如果你在装机过程中还有其他的问题或者发现了更好的技巧，欢迎你在下方评论区与我交流~","categories":[{"name":"科普","slug":"科普","permalink":"https://blog.amoswu.cn/categories/%E7%A7%91%E6%99%AE/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Windows","slug":"Windows","permalink":"https://blog.amoswu.cn/tags/Windows/"},{"name":"装机","slug":"装机","permalink":"https://blog.amoswu.cn/tags/%E8%A3%85%E6%9C%BA/"}]},{"title":"Windows软件系列推荐说明-2","slug":"Windows软件系列推荐说明-2","date":"2019-03-23T16:00:00.000Z","updated":"2021-01-02T16:39:23.577Z","comments":true,"path":"2019/03/24/Windows软件系列推荐说明-2/","link":"","permalink":"https://blog.amoswu.cn/2019/03/24/Windows%E8%BD%AF%E4%BB%B6%E7%B3%BB%E5%88%97%E6%8E%A8%E8%8D%90%E8%AF%B4%E6%98%8E-2/","excerpt":"","text":"日常使用那些事儿输入工具序号：1 软件名称：搜狗输入法智慧版 推荐指数：☆☆☆☆ 推荐理由： ​ 搜狗输入法的官方优化版，新增了诸如”情景感知“、”文思泉涌“、”妙笔生花“、”搜狗卷轴“等等功能。在去掉正式版广告的同时，增加了更人性化的”取消热词弹窗“的选项。 软件简介： ​ 搜狗拼音推出的新概念的“搜狗拼音输入法智慧版”，除了完美支持 Windows8、Windows10 之外，一些新特性也让人不得不佩服搜狗对中文输入的理解！ 搜狗拼音输入法智慧版在原来的基础上，增加了诸如情景感知、文思泉涌、妙笔生花、搜狗卷轴、拼音纠错、长词联想等一系列非常贴心的新功能和新特性。 软件官网： ​ https://pinyin.sogou.com/zhihui/ 序号：2 软件名称：微软拼音输入法 推荐指数：☆☆☆☆ 推荐理由： ​ Windows10内置的输入法，以前没有发现它的正确打开方式，自从深入了解之后，发现原生输入法一点不输那些各大厂商的输入法。它不仅可以实现输入计算器、生字构成器、智慧记忆、词汇学习、自定义功能等等神技能，如果一一掌握相信你会喜欢这款输入法。 软件简介： ​ 微软拼音输入法是由微软和哈尔滨工业大学开发的拼音 输入法实现。它与Microsoft Windows和Microsoft Office的中文版捆绑在一起。可以从Microsoft的网站下载各种版本，但有一些限制。 软件官网： ​ https://www.microsoft.com/zh-cn/download/ 下载工具序号：1 软件名称：EagleGet 推荐指数：☆☆☆☆ 推荐理由： ​ EagleGet 是一款简洁精巧的下载工具，并且它完全免费。EagleGet 的界面要更接近迅雷的经典界面（当然不是迅雷浏览器 9），还支持主题换肤。当然，剪贴板监控、浏览器集成、音视频嗅探、批量及队列下载这些该有的功能也一个不少，还可以在下载完成后自动关机、休眠或调用安全软件进行杀毒。不过很遗憾，EagleGet 同样不支持磁力和 BT 链接，这也让我难以将其作为主力使用。如果你是颜控的话，可以试试它。 ——节选自知乎用户“少数派” 软件简介： 大幅提高下载速度 EagleGet 采用高级多线程技术，将文件分成多个部分并同时传输，可提高下载速度近 6 倍！ 轻松恢复中断的下载 系统崩溃、网络掉线、异常断电……无论什么情况导致的下载中断，只需轻松一点即可恢复下载。我们的高级多线程技术为你省时、省心、省钱。 支持所有主流浏览器 EagleGet 支持包括 Chrome、Firefox、IE、Opera 在内的所有主流浏览器。不管你使用什么浏览器，都可以享受到极速的下载体验。 易用的免费软件 不管你是新手还是专家，EagleGet 精心设计的界面与任务管理都将让你事半功倍。与许多主流的在线视频下载、转换软件不同，EagleGet 完全免费。 软件官网： ​ http://www.eagleget.com/cn/ 序号：2 软件名称：PanDownload 推荐指数：☆☆☆☆ 推荐理由： ​ 超级好用的第三方百度云下载器，支持多账号登录、在线解压、打开分享链接等功能，稳定且高效。 软件简介： ​ PanDownload是一款电脑端百度网盘下载器软件，此款软件能够一键解析百度网盘的下载地址，通过此款软件可实现满速下载，帮助您更好更快的下载百度云资源。 软件官网： http://pandownload.com 影音&amp;音乐序号：1 推荐指数：☆☆☆☆☆ 推荐理由： 无边框、简约皮肤 截图、GIF图制作 轻巧快速 软件简介： ​ PotPlayer 是 KMPlayer 的原制作者姜龙喜先生（韩国）进入 Daum 公司后的新一代网络播放器。PotPlayer 的优势在于强大的内置解码器；而 KMPlayer 的优势在于强大的定制能力和个性化功能。PotPlayer 使用 VC++ 编写， KMPlayer 为 Delphi 编写。PotPlayer 是 Daum 公司的一款网络播放器，有自己的独立著作权，并非由姜龙喜先生原创，目前由 KMPlayer 的原始作者姜龙喜进行后续开发。目前(1428以后版本)的 KMPlayer 由 PandoraTV 团队负责集体开发。 软件官网： ​ http://potplayer.daum.net 序号：2 软件名称：QQ影音 推荐指数：☆☆☆☆☆ 推荐理由： ​ QQ影音十周年推出了最新的4.0版本，在这个网络超过时间流逝的时代里，我们依然需要一款本地播放器，帮助我们实现看高清视频、外挂字幕、视频截取、画质增强、倍速播放等功能。 软件简介： QQ影音是由腾讯公司推出的一款支持任何格式影片和音乐文件的本地播放器。 QQ影音首创轻量级多播放内核技术，深入挖掘和发挥新一代显卡的硬件加速能力，软件追求更小、更快、更流畅的视听享受。 软件官网： ​ http://player.qq.com 序号：3 推荐指数：☆☆☆☆ 软件名称：腾讯视频UWP版 推荐理由： ​ 腾讯视频的Windows商店版本，最重要的是看视频无广告！！！ 软件简介&amp;软件官网： ​ 见腾讯视频官网 序号：4 推荐指数：☆☆☆☆ 软件名称：爱奇艺UWP版 推荐理由： ​ 爱奇艺的Windows商店版本，最重要的是看视频无广告！！！ 软件简介&amp;软件官网： ​ 见爱奇艺官网 聊天工具序号：1 推荐指数：☆☆☆☆☆ 软件名称：TIM 推荐理由： ​ TIM更简洁，少了很多娱乐功能，多了在线编辑文档的功能，对办公有帮助 ——来自知乎用户”Li金海” 软件简介&amp;软件官网： ​ 见TIM官网 内存清理序号：1 推荐指数：☆☆☆☆☆☆ 软件名称：Mem Reduct 推荐理由： ​ 一款来自国外的朋友设计与开发的轻量级实时内存管理应用程序，用于监视和清理计算机上的系统内存。主要用于清理如系统工作集、工作集、备用页面列表或已更改页面列表等系统缓存，能够帮助电脑安全、瞬间且稳定的节约 10~50% 的内存使用量。 ——来自知乎用户“emadons” 软件简介： Mem Reduct 是一款来自于哈萨克斯坦的 VK 好友 Evgeny Kotov 设计与开发的轻量级系统内存实时监测与清理工具，这款程序采用无说明内部系统功能即本机系统服务，主要用于清理如系统工作集、工作集、备用页面内存或已更改页面内存等系统缓存，能够帮助计算机安全、瞬间且稳定的节约 10~50% 的内存使用量。 虽然 Mem Reduct 能够有效兼容 Windows XP 系统，不过建议在 Windows Vista 或者更高版本平台中使用。使用较小内存及较高系统平台的用户来说，那么 Mem Reduct 着实是个不错的小帮手。为了能够使其正确地工作，需以管理员身份运行使用。 软件官网： ​ https://www.softpedia.com/get/Tweak/Memory-Tweak/Mem-Reduct.shtml 压缩软件序号：1 推荐指数：☆☆☆☆☆☆ 软件名称：Bandizip 推荐理由： 用「代码页」和乱码说再见 智慧的「自动解压」命令 「快速拖放」解放临时文件夹 内建「图片预览」快速查看 超便捷的新建文件夹功能 ——综合修改自知乎用户“少数派” 软件简介： ​ Bandizip 是一款压缩软件，它支持WinZip、7-Zip 和 WinRAR 以及其它压缩格式。它拥有非常快速的压缩和解压缩的算法，适用于多核心压缩、快速拖放、高速压缩等功能。软件授权： 免费软件（家庭和办公室 100% 免费）。支持压缩和解压缩: Zip (z01)、ZipX (zx01)、TAR、TGZ、7Z (7z.001)、LZH、ISO 和 EXE (e01)仅支持解压缩: RAR (part1.rar、r01)、ALZ、APK、ARJ、BH、BZ、BZ2、CAB、EGG、GZ、J2J、JAR、IMG、IPA、ISO、LHA、LZH、LZMA、PMA、TBZ、TBZ2、TGZ、TLZ、TXZ、UDF、WAR、WIM、XZ 。 软件官网： ​ http://www.bandisoft.com","categories":[{"name":"推荐","slug":"推荐","permalink":"https://blog.amoswu.cn/categories/%E6%8E%A8%E8%8D%90/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Windows","slug":"Windows","permalink":"https://blog.amoswu.cn/tags/Windows/"},{"name":"装机","slug":"装机","permalink":"https://blog.amoswu.cn/tags/%E8%A3%85%E6%9C%BA/"},{"name":"软件","slug":"软件","permalink":"https://blog.amoswu.cn/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"Windows软件系列推荐说明-1","slug":"Windows软件系列推荐说明-1","date":"2019-03-22T16:00:00.000Z","updated":"2021-01-02T16:39:19.246Z","comments":true,"path":"2019/03/23/Windows软件系列推荐说明-1/","link":"","permalink":"https://blog.amoswu.cn/2019/03/23/Windows%E8%BD%AF%E4%BB%B6%E7%B3%BB%E5%88%97%E6%8E%A8%E8%8D%90%E8%AF%B4%E6%98%8E-1/","excerpt":"","text":"从装机开始U盘启动盘的制作序号：1 软件名称：微PE工具箱 推荐指数：☆☆☆☆☆ 推荐理由： ​ 免费，小巧，干净，纯粹！用它重装系统不会有任何的捆绑软件！ 软件简介： 微乎其微，触手可及 功能极其强大，但又精巧到“可以塞进钱包”。微PE不仅实现了这一目标，甚至还超过了许多的预期。 一键安装，极速启动 全新的安装程序，处处彰显品质。极速进入PE，争分夺秒。我们所做的一切，让您的所有维护操作都顺利极了。 既然免费，岂能不纯净 偷设主页？强制安装?还死不承认？NO，NO，NO。流氓气质今生与我们无缘，我们只想安静哒做个美土豪。老板的任性，成就了唯一值得信赖的PE工具箱。 最后的救命稻草，爱不释手 在微PE面前，任何PC系统软故障，都能迎刃而解。最全面最给力的维护工具合集，拯救您于危难。微PE工具箱将永远是您的好伙伴。 软件官网： ​ http://www.wepe.com.cn/ 系统镜像的来源（网站）序号：1 网站名称：MSDN，我告诉你 推荐指数：☆☆☆☆ 推荐理由： ​ 纯净正版镜像，极速磁力链接下载！ 网站简介： ​ 一个微软官网工具的国内镜像站，虽说是个人建站，但是坚持十年不改初心，也是良心！在这里，你可以找到你想要安装的Windows正版镜像，微软旗下的应用程序安装包以及其他的开发人员工具等等镜像。 网站地址： ​ https://msdn.itellyou.cn/ 驱动管理序号：1 软件名称：360驱动大师网卡版 推荐指数：☆☆☆☆ 推荐理由： ​ 这可不是360全家桶，这只是360的一款良心驱动管理软件，它的好用之处在于内置网卡驱动，在你重装完崭新的系统之后，可以用它先装上网卡驱动，让你的“新电脑”与互联网连接。 软件简介： 360驱动大师（集成万能网卡驱动)是一款专业解决驱动安装更新软件，百万级的驱动库支持，驱动安装一键化，无需手动操作，驱动体检技术，让你更直观了解您电脑的状态，强大的云安全中心让保证您所下载的驱动不带病毒，快一点，再快一点，体验一键化安装和升级的乐趣，驱动大师陪你一路行。 软件官网： http://soft.360.cn/static/baoku/info_7_0/softinfo_103894411.html 安全&amp;杀毒工具序号：1 软件名称：火绒安全 推荐指数：☆☆☆☆☆ 推荐理由： 我说一个自己亲身经历的例子： 我一直装的火绒，也是别人推荐我的上周在网上碰到了一个病毒，火绒杀不了，不停地还是改浏览器首页。 于是在火绒的论坛发帖求助，那天是周日，不到5分钟就有运营回复加QQ。加QQ后立刻拉我进去一个包括他们技术、运营的讨论组，然后让我装一个teamviewer远程。 他们技术远程操作帮我解决问题，提取病毒样本，哪怕是周日，全程从我报病毒到解决问题，不超过30分钟。 我就一个小的免费用户，也不是什么大客户或者企业客户，就冲这样的服务态度我真的无条件向任何人推荐火绒。 ——来自知乎用户 mywatermelon 1.火绒的特长不在杀毒，首先杀毒这东西就是比数据库，谁的数据库全，自然杀毒率高，几年前还迷信vb100，现在早不关注了，因为电脑病毒本身已经很少了，win10也相对做的比较安全了，所以单纯安装一个杀毒软件没啥必要。如果你把win10的杀毒关了特地换一个其他的杀软，那我只能说你太秀了。 2.我觉得火绒的特长在于互联网监控，尤其是阻止弹窗这个功能，堪称国内一绝，从去年底到现在，已经快半年没有看到过弹窗了，后来火绒也没动静，一度以为火绒是不是没启动，看到后下角的图标后就放心了。 3.接上个，安静，如果你把图标隐藏，我相信你过不了多久你会主动去看下是不是火绒没启动，因为他从来不弹窗，就算帮你拦截了也不弹窗。火绒：是的，叫我雷锋。 4.火绒的垃圾清理功能属实一般，这个比不了360，能检测到的垃圾比较少，360可以挖掘的比较深，但聊胜于无，可以用。最后我抛弃360投奔了火绒，因为我已经对半年没有任何广告弹出而高潮～我想继续爽下去。 ——节选自之乎用户 W.Jane ​ 我给火绒的推荐理由是，良心到纯粹。不论是针对个人用户的火绒安全软件4.0还是针对机构用户的火绒终端安全管理系统都非常良心。从使用体验来说，没有任何的捆绑软件，内置很多实用的扩展工具，我使用频率最高的两个功能是弹窗拦截和启动项管理。它本身不会带任何的商业广告以及烦死人的弹窗，就像一个电脑守护者，默默地在后台守护你电脑的安全！支持国产，支持火绒！ 软件官网： ​ https://www.huorong.cn 至此，装机初步所需要的工具、软件、镜像已经推荐完毕，以上软件的每个类型我都推荐了1款，如果你有更多的选择方案，欢迎与我交流~！我们下期见！","categories":[{"name":"推荐","slug":"推荐","permalink":"https://blog.amoswu.cn/categories/%E6%8E%A8%E8%8D%90/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Windows","slug":"Windows","permalink":"https://blog.amoswu.cn/tags/Windows/"},{"name":"装机","slug":"装机","permalink":"https://blog.amoswu.cn/tags/%E8%A3%85%E6%9C%BA/"},{"name":"软件","slug":"软件","permalink":"https://blog.amoswu.cn/tags/%E8%BD%AF%E4%BB%B6/"}],"author":"Amos"},{"title":"Windows软件系列推荐说明-0","slug":"Windows软件系列推荐说明-0","date":"2019-03-21T16:00:00.000Z","updated":"2021-01-02T16:39:14.687Z","comments":true,"path":"2019/03/22/Windows软件系列推荐说明-0/","link":"","permalink":"https://blog.amoswu.cn/2019/03/22/Windows%E8%BD%AF%E4%BB%B6%E7%B3%BB%E5%88%97%E6%8E%A8%E8%8D%90%E8%AF%B4%E6%98%8E-0/","excerpt":"","text":"写在前面 这个软件系列推荐是我结合近两年以来使用过的软件以及遇到过的痛点而总结的一个系列，文中的截图以及文字部分皆为我的原创或整理。如果你也有更好用的软件或者文中所提及软件的补充款，欢迎你和我一起交流。 在这里有必要和大家申明以下几个问题： -为什么要做这个系列推荐？ -这个系列推荐，我早在2017年9月份就开始着手准备，无奈自己能力有限，精力有限才会在这个时间点让它和大家见面。由于我在大学在读期间，在与不同专业的同学以及朋友探讨电脑软件这个话题时，不止一次听到过关于某一类型软件的吐槽或者感慨。从那时我就萌生了一个想法，虽然我的专业是计算机，但是我也不能亲自开发任意一款大众满意的软件。既然创造不了未来，不如就从改变当下开始，于是这个系列就应运而生了。如今的我们生活在一个充满碎片化信息的时代，获取信息的途径有多种，进而得知不同软件的方式也有很多种，我想我做这个系列的初心就是——专注日常使用，让每个会用电脑的人看得懂下文中的每一款软件！ -为什么是Windows软件？ -这个大概是因为博主还没用上Mac吧·····还有就是Linux好像不学计算机的同学都不怎么用吧？ -这些软件有风险吗？你是不是在给它们打广告啊？ -这个系列的所有软件都是经过我亲自使用或被大众口碑所认可的软件，不存在任何的广告行为并且这个系列的推荐是免费共享给大家来看的！ -你不打广告，你也不收费，那你的写这个东西的动力是什么？ -好用的软件可以辅助使用者提高工作效率，如果这个系列中的某一款或多款软件能博得你的认可，希望你也可以动动手把它分享给身边的朋友。分享本身就是一种快乐，更何况这就是我继续写下去的动力！ -这个系列不会是大型破（dao）解（ban）软件聚集地吧？ -这个系列的所有软件我只推荐正版软件且相当一部分是国产软件，在这里也倡议大家能够为国产正版软件发展助力。 -如果我发现你的推荐有问题怎么办？我也想推荐一些我认为好用的软件，我该怎么做呢？ -这个系列的推荐由多个不同的部分组成，分类方式大致是根据我的个人经验，这其中难免会有疏漏或不妥，如果你发现其中存在的问题，欢迎在文末的留言区或通过邮箱等联系方式给我反馈，我将在下一步更新时更正。如果你也想推荐你在日常工作中使用的好软件，同样可以在文末的留言区或通过邮箱等联系方式跟我交流。 -我该怎样才能读懂这个系列推荐呢？ -这个系列每一款软件的推荐共分为七部分： 序号——该类型下软件（网站）的编号，用于识别这类软件的数量 软件（网站）名称——官方名字 推荐指数——☆数越多表示推荐度越高 推荐理由——我或者我身边的朋友以及广大网友在使用这款软件时推荐的理由 软件截图——一般为打开软件的默认界面 软件简介——一般取自官方或大家公认或经过我加工过的简单介绍 软件官网——可以下载或了解该软件的网址 -你可以根据以上的推荐说明，按照不同类型，找到适合自己的软件。 -我觉得这个系列文章不错，想转载到其它媒体途径进行传播，该怎样操作？ -本着“让更多人提高工作效率”的原则，如若转载本文请联系文末邮箱获得授权！谢谢你的支持！","categories":[{"name":"推荐","slug":"推荐","permalink":"https://blog.amoswu.cn/categories/%E6%8E%A8%E8%8D%90/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Windows","slug":"Windows","permalink":"https://blog.amoswu.cn/tags/Windows/"},{"name":"装机","slug":"装机","permalink":"https://blog.amoswu.cn/tags/%E8%A3%85%E6%9C%BA/"},{"name":"软件","slug":"软件","permalink":"https://blog.amoswu.cn/tags/%E8%BD%AF%E4%BB%B6/"}],"author":"Amos"},{"title":"Ubuntu Linux 学习笔记05","slug":"Ubuntu Linux学习笔记05","date":"2019-03-04T16:00:00.000Z","updated":"2021-01-02T16:40:12.876Z","comments":true,"path":"2019/03/05/Ubuntu Linux学习笔记05/","link":"","permalink":"https://blog.amoswu.cn/2019/03/05/Ubuntu%20Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005/","excerpt":"","text":"Open source is not free. Chapter7.硬盘和内存硬盘的命名方式 一般主板上有两个IDE接口，一共可以安装四个IDE设备。Linux下对IDE设备的命名是以 hd开头，分别是hda、hdb、hdc、hdd。 SCSI接口设备是用 sd命名，第一个是sda，第二个是sdb，以此类推。 硬盘的分区 查看分区表 sudo fdisk -l 创建分区 sudo fdisk /dev/sdb ,根据提示操作 格式化 sudo mkfs -t [文件系统格式] 设备名 卸载 sudo umount 设备名或挂载点 硬盘配额 硬盘配额就是管理员可以为用户所能使用的磁盘空间进行配额限制，每一用户只能使用最大配额范围内的磁盘空间，在Linux系统发行版本中使用quota来对用户进行磁盘配额管理，避免了某些用户因为存储垃圾文件浪费磁盘空间导致其他用户无法正常工作。 软限制：在不超出硬限制的情况下，用户在规定时间内释放空间可继续使用。硬限制：一个用户可拥有的磁盘空间或文件的绝对数量，绝不允许超过这个限制。 查看内核是否支持配额 # grep CONFIG_QUOTA /boot/config-[版本号] 安装磁盘配额工具 sudo apt-get install quota quotatool 激活分区的配额功能 1). 建立目录 # mkdir /myquota 2). 修改属性 # chown username: username /myquota 3). 修改/etc/fstab 文件 任务计划 执行一次的 at 命令 格式 at [选项] [时间日期] 任意时间执行的 batch 命令 格式 输入batch命令后，机器显示 at&gt; ，输入机器执行的内容，在系统不忙时会自动执行。 在指定时间执行的 crontab 命令 格式 crontab [选项] [用户名]","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.amoswu.cn/tags/Linux/"},{"name":"Study","slug":"Study","permalink":"https://blog.amoswu.cn/tags/Study/"},{"name":"HBTU","slug":"HBTU","permalink":"https://blog.amoswu.cn/tags/HBTU/"}]},{"title":"Ubuntu Linux 学习笔记04","slug":"Ubuntu Linux学习笔记04","date":"2019-03-03T16:00:00.000Z","updated":"2021-01-02T16:40:18.045Z","comments":true,"path":"2019/03/04/Ubuntu Linux学习笔记04/","link":"","permalink":"https://blog.amoswu.cn/2019/03/04/Ubuntu%20Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004/","excerpt":"","text":"Open source is not free. Chapter 6.用户和组管理Linux用户 Linux是一个多用户多任务的分时操作系统。 每个用户不仅有唯一的用户名，还有唯一的用户id（uid） UID范围 用户类型 0 超级用户 1~499 系统用户 500+ · 用户相关文件 1./etc/passwd 文件 &gt; Linux系统的用户信息保存在配置文件/etc/passwd中，该文件是可读格式的文本，管理员可以利用文本编辑器来修改。 &gt; &gt; passwd文件中有 username: password: uid: gid: userinfo: home: shell 这7个字段，它们的含义分别是 给一个用户可读的名称、加密的用户密码、用户ID，Linux内核用这个整数来识别用户、用户组ID，Linux内核用这个整数来识别用户组、用来保存帮助识别用户的简单文本、当用户登录时，分配给用户的主目录、登录shell是用户登录时的默认shell，通常是/bin/bash。 2./etc/shadow 文件 影子密码文件，用户密码被保存在专门的/etc/shadow 文件中，只有超级管理员的root权限可以查看。 shadow文件中有 username: password: lastchg: min: max: warn: inactive: expire: flag这9个字段，它们的含义分别是 用户的登录名、加密的用户密码、自1970.1.1起到上次修改口令所经过的天数、两次修改口令之间至少经过的天数、口令还会有效的最大天数：9999，即永不过期、口令失效前7天内向用户发出警告、禁止登录前用户还会有效的天数、用户被禁止登录的时间、保留，未使用。 su 和 sudo su命令 功能描述：切换用户 格式：su [选项] 用户名 常用选项： -l 如同重新登录一样 -p 切换当前用户时，不切换用户工作环境，此为默认值 -c 以指定用户身份执行命令，执行命令后再变回原用户 - 切换当前用户时，切换用户工作环境 sudo 命令 功能描述：sudo命令为super user do 的缩写，允许系统管理员分配给普通用户一些合理的权利，让他们执行一些只有超级用户或者其他特许用户才能完成的任务 sudo 工具由文件/etc/sudoers 配置，该文件包含所有可以访问 sudo 工具的用户列表并定义了他们的特权 格式：sudo [选项] 命令 常用选项： -h 列出帮助信息 -V 列出版本信息 -l 列出当前用户可以执行的命令 -u 以指定用户的身份执行命令 -k 清楚 timestamp 文件，下次使用 sudo 时需要再输入密码 -b 在后台执行指定的命令 -p 更改询问密码的提示语 -e 不是执行命令，而是修改文件，相当于命令Sudoedit","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.amoswu.cn/tags/Linux/"},{"name":"Study","slug":"Study","permalink":"https://blog.amoswu.cn/tags/Study/"},{"name":"HBTU","slug":"HBTU","permalink":"https://blog.amoswu.cn/tags/HBTU/"}]},{"title":"Ubuntu Linux 学习笔记03","slug":"Ubuntu Linux学习笔记03","date":"2019-03-02T16:00:00.000Z","updated":"2021-01-02T16:42:19.935Z","comments":true,"path":"2019/03/03/Ubuntu Linux学习笔记03/","link":"","permalink":"https://blog.amoswu.cn/2019/03/03/Ubuntu%20Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003/","excerpt":"","text":"Open source is not free. Chapter 5.Ubuntu文件管理 格式化分区 mkfs 文件与目录的定义 /etc 存放系统所需的重要配置与管理文件 /dev 存放device file （装置文件） /boot 存放与系统激活的相关文件，是系统启动时用到的程序 /home 登录用户的主目录就放在此目录下，以用户的名称作为/home 目录下各个子目录的名称 /lib 存放许多系统激活时所需要的重要的共享函数库 /usr/lib 存放一些应用程序的共享函数库 /mnt 一般为空，是系统默认的挂载点 /proc 虚拟文件系统，不占用硬盘空间，该目录下的文件均放置于内存中 /root 系统管理用户root的主目录 /bin 存放一些系统启动时所需要的普通程序和系统程序，及一些经常被其他程序调用的程序，是Linux常用的外部命令存放的目录 /tmp 存放系统启动时产生的临时文件 /var 存放被系统修改过的数据 文件操作命令 cat 串接文件或显示文件的内容 cat a1.txt a2.txt &gt;&gt; a3.txt 或者 cat a.txt &gt; a1.txt 显示文件内容到文件 串接输入内容到文件cat &gt;a.txt 按下Ctrl + D 结束输入 more 显示输入的 内容，然后根据窗口大小进行分页显示，在终端底部打印出“–More–”及已显示文本占全部文本的百分比 head 显示文件的前n行或前c个字节，不带选项时，默认显示文件的前10行 tail 显示文件的最后n行，默认值为10 echo 输出字符串到基本输出，通常就是在显示器上输出，输出的字符串间以空白字符串隔开，并在最后加上换行号 ls 列出目录的内容，是list的简写形式 pwd 显示当前工作目录的完整路径，是Print Working Directory的简写 cd 改变当前工作目录，是Change Directory 的简写 touch 生成空文件和修改文件存取时间 rm 删除一个目录中的若干个文件或子目录，在默认情况下，rm命令只能删除制定的文件， rm -rf /* 表示的就是递归强制删除根目录下的所有文件，即格式化当前磁盘，是Remove的简写 mkdir 创建指定名称的目录，要求创建目录的用户在当前目录中具有写权限，是Make Directory的简写 rmdir 删除空目录，是Remove Directory的简写 cp 将文件或目录复制到另一个文件或目录中，是Copy的简写 mv 将文件或目录改名，或将文件由一个目录移入另一个目录，是Move的简写 tar 是在Ubuntu中广泛使用的压缩解压命令，是tarball的简写 chgrp 改变文件或目录的所属组，是Change Group的简写 chown 将文件或目录的所有者改变为制定用户，还可以修改文件所属组群，是 Change Owner的简写 chmod 改变文件或目录的访问权限，是Change Mode的简写","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.amoswu.cn/tags/Linux/"},{"name":"Study","slug":"Study","permalink":"https://blog.amoswu.cn/tags/Study/"},{"name":"HBTU","slug":"HBTU","permalink":"https://blog.amoswu.cn/tags/HBTU/"}]},{"title":"Ubuntu Linux 学习笔记02","slug":"Ubuntu Linux学习笔记02","date":"2019-03-01T16:00:00.000Z","updated":"2021-01-02T16:42:24.310Z","comments":true,"path":"2019/03/02/Ubuntu Linux学习笔记02/","link":"","permalink":"https://blog.amoswu.cn/2019/03/02/Ubuntu%20Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/","excerpt":"","text":"Open source is not free. Chapter 4.Ubuntu Linux 14.04 字符界面使用 Shell功能 设置root超级管理员密码，在终端中输入以下代码： 123456sudo passwd/当前用户密码/su输入新的 UNIX 密码:重新输入新的 UNIX 密码:passwd: 已成功更新密码 - 进入和退出超级管理员模式： - 进入：su 标志--‘#’ - 退出：exit 标志--‘$’ - 学会使用 Tab键自动补齐 - 安装 pip3 `sudo apt install python3-pip` - 字符界面下的关机和重启 - 关机： init 0 - 重启： init 6 - Putty远程登录 - 安装openssh-server `sudo apt-get install openssh-server` - 安装客户端 - 操作日志截图如下：","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.amoswu.cn/tags/Linux/"},{"name":"Study","slug":"Study","permalink":"https://blog.amoswu.cn/tags/Study/"},{"name":"HBTU","slug":"HBTU","permalink":"https://blog.amoswu.cn/tags/HBTU/"}]},{"title":"Ubuntu Linux 学习笔记01","slug":"Ubuntu Linux学习笔记01","date":"2019-02-28T16:00:00.000Z","updated":"2021-01-02T16:42:28.463Z","comments":true,"path":"2019/03/01/Ubuntu Linux学习笔记01/","link":"","permalink":"https://blog.amoswu.cn/2019/03/01/Ubuntu%20Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/","excerpt":"","text":"Open source is not free. Chapter 1 - 3：虚拟机、Ubuntu Linux 系统介绍、Ubuntu Linux 14.04图形界面 Debugging environment： VMware Version： WorkStation14 Pro Windows Version： 10 Home and Basic 64bit Linux Version： Ubuntu 16.04LTS amd64 Textbook version： Title： Ubuntu Linux 操作系统与实验教程 Author： 马丽梅 郭晴 张林伟 边玲 张红新 王天马 李红 由于物理机显卡为NVIDIA，存在驱动类bug，故没有安装课本配套的Ubuntu Kylin。 Ubuntu官方版安装过程与课本几乎一致，安装完成进行汉化即可。下面附上汉化教程： 在物理机成功连接外网的情况下，将虚拟机联网方式设置为“桥接模式” 将更新源设置成国内任意一个源 依次点击Ubuntu 右上角的开关图标 -&gt; System Setting -&gt; Language Support -&gt; Install -&gt; 输入当前登录用户的密码 -&gt; Install / Remove Language -&gt; 勾选 Chinese(simplified) -&gt; Apply 在 Language Support - Language 选项卡内，将 汉语(中国) 拖拽到最顶部，再点击 Apply System-Wide 在Language Support - Regional Formats 选项卡内，在下拉框内选择 汉语(中国) ，再点击 Apply System-Wide，最后点击Close 关机重启 重新进入系统后会提示 “将标准文件夹更新到当前语言吗？”，点击“更新名称”，汉化完成。 理解 .vmdk 文件和 .vmx 文件的不同： vmdk 文件为虚拟磁盘文件（相当于电脑硬盘）会存放当前虚拟机中的所有文件 .vmx 文件为虚拟机配置文件（即虚拟机的系统文件 二者的明显差异是，占用的存储空间大小不同；深层次的差异是，二者的功能不同。 Linux 系统一般有4个主要部分： 内核(Linux Kernel)：由C语言和汇编语言编写而成，第一个版本发行于1991年，是Linux系统的核心，最新版本4.20.13(2019.2.27) shell：一种壳层与命令行界面，是UNIX操作系统下传统的用户和计算机的交互界面 文件系统：是文件存放在磁盘等存储设备上的组织方法，Linux支持的文件系统有ext2、ext3、ext4、FAT、FAT32、VFAT、ISO 9660 应用程序：标准的Linux系统一般都有一套成为应用程序的程序集，它包括文本编辑器、编程语言、X Window、办公套件、Internet工具和数据库等 Linux发行版本 Linux发行版本大概有300个，目前最普遍被使用的有大约12个，较为知名的有 Debian[9.8 (Stretch)，开发代号来自于电影《玩具总动员》] Ubuntu[18.10，基于Debian开发] Fedora[29] openSUSE[Leap 15] Red Hat[9 alias Shrike] Mandriva、红旗[9.0]","categories":[{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.amoswu.cn/tags/Linux/"},{"name":"Study","slug":"Study","permalink":"https://blog.amoswu.cn/tags/Study/"},{"name":"HBTU","slug":"HBTU","permalink":"https://blog.amoswu.cn/tags/HBTU/"}]},{"title":"美好，在下一个未来","slug":"美好，在下一个未来","date":"2018-12-30T16:00:00.000Z","updated":"2021-01-02T16:38:42.467Z","comments":true,"path":"2018/12/31/美好，在下一个未来/","link":"","permalink":"https://blog.amoswu.cn/2018/12/31/%E7%BE%8E%E5%A5%BD%EF%BC%8C%E5%9C%A8%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9C%AA%E6%9D%A5/","excerpt":"","text":"没有任何道路可以通向真诚，真诚本身就是一条道路。 ​ &nbsp; &nbsp; &nbsp; &nbsp;转眼间，2018年已悄然走到尽头。时间的车轮在碾碎压力的同时也载着希望开往下一个未来。 回望2018 年初的Flag &nbsp; &nbsp; &nbsp; &nbsp;-看至少30部影片&nbsp; &nbsp; &nbsp; &nbsp;-读至少50本书 完成情况 &nbsp; &nbsp; &nbsp; &nbsp;-看完33部影片&nbsp; &nbsp; &nbsp; &nbsp;-读完157本书 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*时间截止至2018.12.12 大事记 暂时告别自媒体运营 2018.1 掌握Windows10桌面优化技能 2018.2 打卡“古城台儿庄” 2018.2 深入了解并体会“区块链”技术，尝试“网易星球” 2018.3 打卡“长城、鸟巢、水立方” 2018.4 第九届工学团总支换届 2018.6 “工学电脑小分队”当选志愿服品牌 2018.6 “学习并使用Python” 2018.6 当选“工学部辅导员助理” 2018.6 “构建毕业设计” 2018.7 获得小米公司实习证明 2018.8 完成个人服务器租赁、域名备案第一个网站上线 2018.8 工学微课堂Office专题 2018.10 第五届山东老乡会 2018.10 Leaf+ 立项 2018.10 搭建Github个人博客 2018.11 Leaf+ v1.0上线 2018.11 Leaf+ 官网上线 2018.11 凭借Leaf+项目获得全国一等奖 2018.12 参加河北省职业技能大赛 2018.12 &nbsp; &nbsp; &nbsp; &nbsp;2018其实是我的大学4年中，意义非凡的一年。在这一年，我不仅在现实世界中交到了更多的朋友，学会了更多的技能，同时也提高了自身的格局！在学业规划方面，考研的必要性愈发凸显，2016年是知识付费元年，我有幸跻身到知识付费大军之中——加入得到！深刻认识到，平台的重要作用！考研，不仅仅是想跨向更高、更宽广的平台，同时也是继续扩大自身“认知地图”的需要。在以上的“大事记”中，还有一项我并没有列举的项目——志愿服务。据不完全统计，2018年我的志愿服务时长约200小时。在志愿服务过程中，感触最深的一句话被我放在此篇博文的开头“没有任何道路可以通向真诚，真诚本身就是一条道路”。&nbsp; &nbsp; &nbsp; &nbsp;今年也让我更深层次的理解到&nbsp; &nbsp; &nbsp; &nbsp;-什么是格局？&nbsp; &nbsp; &nbsp; &nbsp;-是一种态度，是一辈子的追求，是一生的坚守。很多东西可以道听途说，但更深层次的东西需要亲历。格局取决于你走的有多远，眼界有多高，视野有多大。&nbsp; &nbsp; &nbsp; &nbsp;回望即将告别的2018，有很多心酸，也有很多感动。也让我总结了一句话“学会感恩，懂得知足，变得善良”。 展望2019 Flag&nbsp; &nbsp; &nbsp; &nbsp;-看至少30部影片&nbsp; &nbsp; &nbsp; &nbsp;-读至少60本书&nbsp; &nbsp; &nbsp; &nbsp;-完成“十年总结”的第2次&nbsp; &nbsp; &nbsp; &nbsp;-考研初试380+（60+60+130+130）&nbsp; &nbsp; &nbsp; &nbsp;-学习总时长2500h+&nbsp; &nbsp; &nbsp; &nbsp;-坚持每日4000步+ &nbsp;&nbsp;&nbsp;&nbsp;以上Flag中的第三条是我开启的一个新的计划，也可以说是一个目标。从2018年，年底开始为期10年的年度总结，持续到2029年结束。时间不长，这个过程我会在我的博客和朋友圈进行同步，请您同我一起见证！这就像得到App创始人罗振宇先生所说过的一句话，“做一件有价值的事，一直做，静静等待时间的回报”！ &nbsp;&nbsp;&nbsp;&nbsp;感谢您可以耐心地读到这里，我正坐在电脑前，聆听“时间的朋友2018”第4次跨年演讲，最后在这个告别过去，展望新时期的时刻，祝您：2019，元旦快乐，万事如意！ &nbsp;&nbsp;&nbsp;&nbsp;最后，我想以清朝山阴金先生《格言联璧·处事》中的一句话作结“日日行，不怕千万里；常常做，不怕千万事”。我相信，美好，一定在下一个未来！ 2018/12/31 22:33 于河北·石家庄","categories":[{"name":"年度总结","slug":"年度总结","permalink":"https://blog.amoswu.cn/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2018","slug":"2018","permalink":"https://blog.amoswu.cn/tags/2018/"},{"name":"年度总结","slug":"年度总结","permalink":"https://blog.amoswu.cn/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"}]},{"title":"Windows10，拯救你的桌面","slug":"Windows10，拯救你的桌面","date":"2018-11-05T16:00:00.000Z","updated":"2021-01-02T16:42:11.373Z","comments":true,"path":"2018/11/06/Windows10，拯救你的桌面/","link":"","permalink":"https://blog.amoswu.cn/2018/11/06/Windows10%EF%BC%8C%E6%8B%AF%E6%95%91%E4%BD%A0%E7%9A%84%E6%A1%8C%E9%9D%A2/","excerpt":"","text":"前言如今，越来越多的Win10用户厌倦了传统的桌面模式。打开桌面如同掉进了垃圾堆，桌面好多“杂物”如灾难一般存在，那么，Windows桌面优化就显得十分迫切而又重要。今天小编将分四个部分给大家简单地介绍一种拯救你的桌面的方法。 先放效果图 一、桌面优化1.桌面图标整理 最令人烦的就是，桌面图标越来越多，可是又不舍得删掉任何一个。——这该怎么办？——某管家桌面小助手啊。。。我：……. 细心的同学会发现，上面的效果图第三张左侧出现了一个窗口，这就是我要给大家介绍的一个桌面启动工具——Rolan。 简单介绍一下这个工具—— Rolan 是一个轻量级启动器，小巧强大，绿色便携。你可以通过将文件拖到软件窗口中，然后通过像 QQ 一样的吸附或者键盘热键随时呼出，点击图标即可启动，使用起来非常方便快捷！同时 Rolan 还支持各种皮肤和界面元素的定制，还可以根据自己的使用习惯自由组合各种功能。在新版本中，Rolan 还加入了对纯键盘操作的支持。 2.添加桌面美化插件这里小编就简单介绍两类值得探索的桌面小插件。 1）雨滴桌面（Rainmeter）简单介绍一下这款插件—— Rainmeter原本是一个系统状态监视软件，由于其强大的可定制性及拓展性，诸多使用者在原来的基础上开发了成百上千的插件程序和皮肤样式，使得现在的Rainmeter几乎成为一款完美的系统美化工具。受到众多美化爱好者的青睐。Rainmeter的皮肤大都走抽象、简洁的设计路线，非常适合作为一款桌面美化软件。 这里小编用的极简风格的时钟（Clock）插件，效果图的右上角显示的时钟就是用这个插件实现的。下面分享一下这个时钟的设置步骤： a）下载Rainmeter并安装 b）打开已经安装好的Rainmeter，会在右下角状态栏显示一个雨滴 的图标，右击当前图标 “打开皮肤目录”， 将素材包里的时钟解压后直接放到这里面就可以了 这个时钟有两个模式，一个是白色即ClockLight.ini，另一个是黑色即ClockDark.ini，大家酌情选择吧~ c）最终配置 2）Mcool播放器 简单介绍一下这款插件—— 简约而不简单无损音乐播放器，轻，透明，无边框，嵌入桌面。 这款软件是开源的，大家喜欢的话可以多多探索呀~小编的播放器配置都打包放在素材包了~效果图第一张中的“差一步”歌曲就是在这个播放器中播放的。 二、任务栏优化众所周知，Windows10默认状态栏是黑色的，即使可以改变它的颜色，但是还是很丑！今天给大家分享一个可以让任务栏更美观的方案。 1.任务栏透明所需软件：TaskbarTools操作步骤： a）下载并安装StartlsBack b）打开软件，依次点击“透明风格→桌面不透明度100%”，再依次点击“设置与关于→使用服务方式自启→自启时不显示任务栏图标” 2.任务栏图标及状态栏优化a）图标优化 它的另一个名字叫图标替换。将你想放入任务栏的图标快捷方式放至桌面，然后按照这个教程→http://t.cn/R8CsB6u 替换图标，最后固定图标到任务栏即可。 小编用的图标包名称是——Pure图标包（轻雨图标包），风格各有不同，大家可以在酷安下载其他风格的图标包进行自己的DIY。 b）状态栏优化 按照小编状态栏的顺序，从左到右依次是网速监控工具，内存清理工具，系统图标。 网速监控工具名称：NetSpeedMonitor 内存清理工具名称：Mem Reduct 以上两个工具安装教程见度娘，大家酌下载吧。 系统图标优化步骤： 状态栏右击→设置→打开或关闭系统图标→自行选择开关某个系统图标 3.图标居中这里就不多赘述了，直接打开链接→ http://t.cn/RiTPKpO 按步骤操作即可获得。 彩蛋：效果图的第四张，肯定有很多小伙伴想知道是怎么弄出来的，其实是Windows自带的神技能（手动滑稽）。直接上教程吧，戳 http://t.cn/R8NZy3C ，设置完快捷方式后替换一下图标就可以了~ 三、桌面壁纸小编从网上整理了以下两种方式供大家选择。 1.网络获取个性风格： Simple Desktops http://simpledesktops.com/ Vladstudio http://www.vladstudio.com/zh/home/ 风景励志： Interfacelift http://interfacelift.com/ 必应壁纸 http://bing.ioliu.cn/ 壁纸综合： HD wallpapers http://www.hdwallpapers.in/ Cave http://wallpapercave.com/ 2.软件获取软件名称：WallpaperEngine（正版需付费） 获取方式：Steam平台搜索下载 四、其他1.素材包获取→链接：https://pan.baidu.com/s/1jKcPUcA 密码：8jhe 2.Rolan下载地址：http://www.irolan.com/rolan2.zip 3.Rainmeter下载地址：http://t.cn/R8N4QAA 4.与Mcool类似的播放器——Foobar2000","categories":[{"name":"推荐","slug":"推荐","permalink":"https://blog.amoswu.cn/categories/%E6%8E%A8%E8%8D%90/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2018","slug":"2018","permalink":"https://blog.amoswu.cn/tags/2018/"},{"name":"Windows10","slug":"Windows10","permalink":"https://blog.amoswu.cn/tags/Windows10/"},{"name":"桌面美化","slug":"桌面美化","permalink":"https://blog.amoswu.cn/tags/%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"},{"name":"电脑优化","slug":"电脑优化","permalink":"https://blog.amoswu.cn/tags/%E7%94%B5%E8%84%91%E4%BC%98%E5%8C%96/"}]},{"title":"Office专题分享","slug":"Office专题分享","date":"2018-10-12T16:00:00.000Z","updated":"2021-01-02T16:42:56.305Z","comments":true,"path":"2018/10/13/Office专题分享/","link":"","permalink":"https://blog.amoswu.cn/2018/10/13/Office%E4%B8%93%E9%A2%98%E5%88%86%E4%BA%AB/","excerpt":"","text":"2018年10月13日，记工学微课堂","categories":[{"name":"稿件","slug":"稿件","permalink":"https://blog.amoswu.cn/categories/%E7%A8%BF%E4%BB%B6/"},{"name":"PPT","slug":"稿件/PPT","permalink":"https://blog.amoswu.cn/categories/%E7%A8%BF%E4%BB%B6/PPT/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2018","slug":"2018","permalink":"https://blog.amoswu.cn/tags/2018/"},{"name":"微课堂","slug":"微课堂","permalink":"https://blog.amoswu.cn/tags/%E5%BE%AE%E8%AF%BE%E5%A0%82/"},{"name":"office","slug":"office","permalink":"https://blog.amoswu.cn/tags/office/"},{"name":"电脑技巧","slug":"电脑技巧","permalink":"https://blog.amoswu.cn/tags/%E7%94%B5%E8%84%91%E6%8A%80%E5%B7%A7/"}]}],"categories":[{"name":"科普","slug":"科普","permalink":"https://blog.amoswu.cn/categories/%E7%A7%91%E6%99%AE/"},{"name":"知识整理","slug":"知识整理","permalink":"https://blog.amoswu.cn/categories/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"},{"name":"新知","slug":"新知","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/"},{"name":"笔记","slug":"新知/笔记","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E7%AC%94%E8%AE%B0/"},{"name":"年度总结","slug":"年度总结","permalink":"https://blog.amoswu.cn/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"name":"特别博文","slug":"特别博文","permalink":"https://blog.amoswu.cn/categories/%E7%89%B9%E5%88%AB%E5%8D%9A%E6%96%87/"},{"name":"随笔","slug":"新知/随笔","permalink":"https://blog.amoswu.cn/categories/%E6%96%B0%E7%9F%A5/%E9%9A%8F%E7%AC%94/"},{"name":"稿件","slug":"稿件","permalink":"https://blog.amoswu.cn/categories/%E7%A8%BF%E4%BB%B6/"},{"name":"笔记","slug":"知识整理/笔记","permalink":"https://blog.amoswu.cn/categories/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E7%AC%94%E8%AE%B0/"},{"name":"推荐","slug":"推荐","permalink":"https://blog.amoswu.cn/categories/%E6%8E%A8%E8%8D%90/"},{"name":"PPT","slug":"稿件/PPT","permalink":"https://blog.amoswu.cn/categories/%E7%A8%BF%E4%BB%B6/PPT/"}],"tags":[{"name":"原创","slug":"原创","permalink":"https://blog.amoswu.cn/tags/%E5%8E%9F%E5%88%9B/"},{"name":"2020","slug":"2020","permalink":"https://blog.amoswu.cn/tags/2020/"},{"name":"随笔","slug":"随笔","permalink":"https://blog.amoswu.cn/tags/%E9%9A%8F%E7%AC%94/"},{"name":"Qt","slug":"Qt","permalink":"https://blog.amoswu.cn/tags/Qt/"},{"name":"C++","slug":"C","permalink":"https://blog.amoswu.cn/tags/C/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.amoswu.cn/tags/%E7%AC%94%E8%AE%B0/"},{"name":"转载","slug":"转载","permalink":"https://blog.amoswu.cn/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"教程","slug":"教程","permalink":"https://blog.amoswu.cn/tags/%E6%95%99%E7%A8%8B/"},{"name":"2019","slug":"2019","permalink":"https://blog.amoswu.cn/tags/2019/"},{"name":"年度总结","slug":"年度总结","permalink":"https://blog.amoswu.cn/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"name":"特别博文","slug":"特别博文","permalink":"https://blog.amoswu.cn/tags/%E7%89%B9%E5%88%AB%E5%8D%9A%E6%96%87/"},{"name":"新知识","slug":"新知识","permalink":"https://blog.amoswu.cn/tags/%E6%96%B0%E7%9F%A5%E8%AF%86/"},{"name":"Study","slug":"Study","permalink":"https://blog.amoswu.cn/tags/Study/"},{"name":"HBTU","slug":"HBTU","permalink":"https://blog.amoswu.cn/tags/HBTU/"},{"name":"汇编","slug":"汇编","permalink":"https://blog.amoswu.cn/tags/%E6%B1%87%E7%BC%96/"},{"name":"微机原理","slug":"微机原理","permalink":"https://blog.amoswu.cn/tags/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"},{"name":"毕业季","slug":"毕业季","permalink":"https://blog.amoswu.cn/tags/%E6%AF%95%E4%B8%9A%E5%AD%A3/"},{"name":"发言稿","slug":"发言稿","permalink":"https://blog.amoswu.cn/tags/%E5%8F%91%E8%A8%80%E7%A8%BF/"},{"name":"工学","slug":"工学","permalink":"https://blog.amoswu.cn/tags/%E5%B7%A5%E5%AD%A6/"},{"name":"团总支","slug":"团总支","permalink":"https://blog.amoswu.cn/tags/%E5%9B%A2%E6%80%BB%E6%94%AF/"},{"name":"Windows","slug":"Windows","permalink":"https://blog.amoswu.cn/tags/Windows/"},{"name":"装机","slug":"装机","permalink":"https://blog.amoswu.cn/tags/%E8%A3%85%E6%9C%BA/"},{"name":"软件","slug":"软件","permalink":"https://blog.amoswu.cn/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.amoswu.cn/tags/Linux/"},{"name":"2018","slug":"2018","permalink":"https://blog.amoswu.cn/tags/2018/"},{"name":"Windows10","slug":"Windows10","permalink":"https://blog.amoswu.cn/tags/Windows10/"},{"name":"桌面美化","slug":"桌面美化","permalink":"https://blog.amoswu.cn/tags/%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"},{"name":"电脑优化","slug":"电脑优化","permalink":"https://blog.amoswu.cn/tags/%E7%94%B5%E8%84%91%E4%BC%98%E5%8C%96/"},{"name":"微课堂","slug":"微课堂","permalink":"https://blog.amoswu.cn/tags/%E5%BE%AE%E8%AF%BE%E5%A0%82/"},{"name":"office","slug":"office","permalink":"https://blog.amoswu.cn/tags/office/"},{"name":"电脑技巧","slug":"电脑技巧","permalink":"https://blog.amoswu.cn/tags/%E7%94%B5%E8%84%91%E6%8A%80%E5%B7%A7/"}]}